slug: terraform-cloud-aws
id: 2hgi8e9hftli
type: track
title: Terraform Cloud with AWS
teaser: Join the ACME devops team on their journey to fully automated provisioning
  with AWS Cloud.
description: |-
  Work with the devops team at Acme Inc. as they go from manual provisioning with Terraform to a fully automated devops workflow with code reviews, testing, and automated provisioning in AWS Cloud. This workshop covers the following topics:

  * Terraform Open Source
  * Terraform Cloud
  * Remote State
  * Secure Variable Storage
  * Version Control Integration
  * Role-based Access Controls
  * Sentinel Security Policies
  * Collaboration on Changes
  * Private Module Registry
icon: https://storage.googleapis.com/instruqt-hashicorp-tracks/logo/terraform.png
tags:
- terraform
- aws
- cloud
- enterprise
owner: hashicorp
developers:
- scarolan@hashicorp.com
private: true
published: true
challenges:
- slug: setup-our-environment
  id: 8ptkcyuuh6r0
  type: challenge
  title: "\U0001F3E1 Moving in - Set Up Your Workspace"
  teaser: Configure your code editor with the HCL extension and open a workspace.
  assignment: |-
    Welcome to your first day as an intern at ACME Inc. [ACME](https://www.youtube.com/watch?v=9m7evoFF83c) is a multi-national conglomerate that sells anvils, rocket powered roller skates, deyhdrated boulders, earthquake pills and birdseed.

    After employee orientation you sit down at your workstation and open your text editor, Visual Studio Code.

    Open the Code Editor tab on the left.

    Select "File > Open Folder".

    Find the `hashicat-aws` directory in the Code Editor and hit `OK`.

    This is your terraform workspace.

    Now click on the box-shaped icon on the bottom of the left side menu. This opens the Extensions sidebar.

    Search for *hcl*. Install the first extension on the list. It is named `HCL`.

    Click on the blue **Reload Required** button to refresh the editor.

    Now click on the explorer icon on the top of the left side menu. It looks like a stack of documents.

    Congratulations, you've configured your environment to work with Terraform!
  notes:
  - type: text
    contents: "Welcome to your first day on the job at ACME Inc. These are some of
      your coworkers in the local ACME office:\n<center><table cellpadding=20>\n  <tr>\n
      \   <td>\n    \U0001F468\U0001F3FB‍\U0001F4BC Hiro - Product Manager<br>\n    \U0001F9D5\U0001F3FD
      Aisha - Database Admin<br>\n    \U0001F46E\U0001F3FF‍♂️ William - InfoSec Lead<br>\n
      \   \U0001F468\U0001F3FB‍\U0001F9B2 Lars - Lead Developer<br>\n    </td>\n    <td>\n
      \   \U0001F9D3\U0001F3FB Robin - Operations Admin<br>\n    \U0001F469‍\U0001F3A4
      Jane - Quality Assurance<br>\n    \U0001F473\U0001F3FE‍♂️ Gaurav - Network Admin<br>\n
      \   \U0001F469\U0001F3FC‍\U0001F4BC Karen - Finance    </td>\n  </tr>\n</table></center>\n\n<center>\U0001F913
      You - Brand New Intern\n</center>"
  - type: text
    contents: Most modern text editors support Terraform syntax highlighting.
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8080
  difficulty: basic
  timelimit: 600
- slug: open-a-terminal
  id: j5cp109wofoa
  type: challenge
  title: "\U0001F5A5️ Open a Terminal"
  teaser: Terraform commands are run from a terminal window. Terraform can be installed
    on Linux, Windows, or MacOS.
  assignment: |-
    Open a new Terminal window. You can use the "Terminal > New Terminal" menu item or the keyboard shortcut **CTRL-J** (**CMD-J** on Mac).

    All terraform commands should be run from the terminal within the Code Editor.

    Try the **CTRL-J** shortcut to toggle the terminal window open and closed.

    You can use the little caret ^ shaped button on the terminal pane to expand and shrink your Terminal window. This is useful for viewing logs.

    Click on the File Explorer icon a couple times to toggle the File Explorer on and off. This can provide more space while you're viewing and editing code.

    You can also hide and show these notes with the expand icon on the upper right side of the GUI. It looks like a box with two small arrows in the corners. This will expand and close the notes panel. Try it now to give your text editor more space.

    Try running the following command in your terminal pane:

    ```
    terraform version
    ```

    Good job, you're ready to deploy the hashicat application on AWS!
  notes:
  - type: text
    contents: The terraform command line tool is available for MacOS, FreeBSD, OpenBSD,
      Windows, Solaris and Linux.
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8080
  difficulty: basic
  timelimit: 600
- slug: terraform-cloud-setup
  id: flgornvw5xu5
  type: challenge
  title: ☁️ Terraform Cloud Setup
  teaser: Terraform Cloud offers unlimited free terraform state storage for users.
    Safeguard your state files by storing them remotely in Terraform Cloud.
  assignment: |-
    Sign up for a free Terraform Cloud account at the following URL:

    https://app.terraform.io/signup/account

    If you already have an account you can simply sign in with your existing credentials.

    Once you're signed into Terraform Cloud create a new organization called YOURNAME-training. Replace YOURNAME with your own name or other text.

    Next you'll be prompted to create a workspace. You can skip the VCS integration step by clicking the "No VCS Connection" button. Name your workspace **hashicat-aws**.

    Now go into the workspace's **Settings >> General** settings page and change the Execution Mode to local.  Be sure to save your settings! This will allow us to run terraform commands from our workstation with local variables.

    Finally, provide your instructor with your organization's name. They will upgrade your organization to unlock a 30 day free trial of all paid features.
  notes:
  - type: text
    contents: Terraform Cloud remote state storage is free for all users.
  tabs:
  - title: Terraform Cloud
    type: external
    url: https://app.terraform.io
  difficulty: basic
  timelimit: 600
- slug: oh-no-an-outage
  id: 6ddjxvjdqigq
  type: challenge
  title: "\U0001F631 Oh No - An Outage!"
  teaser: An unexpected outage has taken down one of the production websites. How
    can Terraform help the team recover quickly?
  assignment: |-
    Your task is to configure remote state using your Terraform Cloud account. In order to complete this challenge you'll need the following:

    1. A free Terraform Cloud account - log in at https://app.terraform.io<br>
    2. An organization called **yourname-training**. Replace yourname with any string of letters or numbers.<br>
    3. A workspace named **hashicat-aws** with its Execution Mode set to **Local** (not Remote)<br>
    4. A *user* token for authentication<br>
    5. A `.terraformrc` file to store your user token<br>
    6. A `remote_backend` config stored in your workspace<br>

    We've given you a head start with templates for the `/root/.terraformrc` file and your `remote_backend.tf` configuration file. You will need to edit these files and insert your own token, organization and
    workspace names.

    Once you've got all the pieces in place, try running a `terraform init` and then `terraform apply` command in the terminal.

    When you're done you should see a new state file in your Terraform Cloud workspace.

    Report back to Robin with the *Check* button below once you've successfully deployed the hashicat application with remote state enabled.
  notes:
  - type: text
    contents: "It's Monday morning and you're the first one into the office. Most
      of your teammates were up late fixing last night's outage. Eventually senior
      operations admin Robin shows up at your desk.\n\n>\U0001F9D3 Hey kiddo, how
      are you doing? Listen, I want your help with something. Last night we had trouble
      rebuilding the website because the terraform state file was stored on Lars'
      laptop. And guess what, Lars is on vacation for the next two weeks. Why don't
      you help me configure remote state on this application so this doesn't happen
      again?"
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8080
  - title: Terraform Cloud
    type: external
    url: https://app.terraform.io
  difficulty: basic
  timelimit: 600
- slug: protecting-sensitive-variables
  id: kdpzdpk67mjx
  type: challenge
  title: "\U0001F510 Securing Cloud Credentials"
  teaser: Your team has started building cloud infrastructure on AWS, but the security
    team is concerned about protecting access to everyone's cloud credentials.
  assignment: |-
    After the AWS credentials issue, the security team is tightening down access to your AWS account. API keys must now be secured as stored variables in Terraform Cloud. Your task is to find your AWS Access Key ID and Secret Access Key, and move them into your workspace as secure environment variables.

    In order to complete this challenge you'll need to do the following:

    1. Find your AWS credentials with the following commands:

    ```
    echo $AWS_ACCESS_KEY_ID
    echo $AWS_SECRET_ACCESS_KEY
    ```
    2. Update the **Execution Mode** settings in your workspace to **Remote**.
    3. Set **Environment Variables** for your AWS credentials and mark them as "Sensitive".
    4. Set **Terraform Variables** for your `prefix` and `region`. Learn more about these variables by looking in the variables.tf file.

    Test your work by running `terraform init`. Your backend configuration will be updated for remote execution.

    Next try running `terraform plan`. You should see a remote execution run begin on Terraform Cloud. A copy of the output will be streamed back to your terminal. Run a terraform apply to see it in action:

    ```
    terraform apply -auto-approve
    ```

    The `-auto-approve` flag will override the approval phase and go directly to the build.

    Congratulations, your AWS keys are now safely encrypted and stored in your Terraform Cloud workspace.

    You can continue to run `terraform plan` and `terraform apply` in your terminal, but the execution is now done in Terraform Cloud.
  notes:
  - type: text
    contents: "After a few weeks on the job you're starting to get into the rhythm
      of things. Write some code, run some tests, deploy the website. Everything's
      going great until someone's AWS keys are accidentally pushed to a public code
      repository. You get this email from William, the lead infosec admin at ACME:\n\n\U0001F46E\U0001F3FF‍♂️
      Hello intern, we ran a remote scan on your laptop last night and found some
      unsecured AWS access keys. We need you to move those off your laptop and store
      them in Terraform Cloud by the end of the day."
  - type: text
    contents: "\U0001F914 Did you know?\n\nThousands of API and cryptographic keys
      are leaking on GitHub every day!\n\nhttps://nakedsecurity.sophos.com/2019/03/25/thousands-of-coders-are-leaving-their-crown-jewels-exposed-on-github/\n\nWhen
      you store your API keys as sensitive variables they are encrypted and stored
      in an instance of HashiCorp Vault. These keys are only decrypted in a trusted,
      secure container that runs the terraform command."
  - type: text
    contents: "\U0001F469\U0001F3FC‍\U0001F4BB Remote Execution, Local Code\n\nRemote
      Execution allows you to use the same terraform commands that you're familiar
      with, but the run and all your variables are safely stored in your Terraform
      Cloud workspace. This can be helpful when you're upgrading tools that were originally
      written for Terraform Open Source.\n\nWith Remote Execution your terraform code
      is still stored on your local machine and sent to the server each time you run."
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8080
  - title: Terraform Cloud
    type: external
    url: https://app.terraform.io
  difficulty: basic
  timelimit: 600
- slug: sharing-is-caring
  id: yxnc2r1zlmlg
  type: challenge
  title: "\U0001F91D\U0001F3FC Working with Teams in Terraform Cloud"
  teaser: As your Terraform usage increases more team members want to collaborate.
    Let's add some teams and access rules for our organization.
  assignment: |-
    Teams and role-based access controls are a paid feature of Terraform Cloud. Your instructor will need to upgrade your organization to a free trial in order to complete this challenge.

    In this challenge you'll create teams with different levels of access to your workspace. You can then invite teammates so they are able to collaborate on code changes and terraform runs.

    1. Go into your organization's General Settings and click on the **Teams** link.<br>
    2. Add a team called **admins**. Admins should be able to manage policies, manage workspaces, and manage VCS settings.<br>
    3. Add another team called **developers**. Developers should not have any organization-wide access.<br>
    4. Add a third team called **managers**. Managers should also not have any organization-wide access.

    Now that you have created some teams you can invite your teammates to your organization. Select the **Users** option in your organization's General Settings.

    * Invite `scarolan+instruqt-aisha@hashicorp.com` to the **developers** team.<br>
    * Invite `scarolan+instruqt-lars@hashicorp.com` to the **admins** team.<br>
    * Invite `scarolan+instruqt-hiro@hashicorp.com` to the **managers** team.

    Now you can assign access rights to the hashicat-aws workspace. Go into the **Team Access** page of the hashicat-aws workspace settings.

    * Give the **admins** group admin level access.<br>
    * Give the **developers** group write level access.<br>
    * Give the **managers** group read level access.

    Note that you will not see these users appear in your organization until your instructor accepts the invitations to your organization.
  notes:
  - type: text
    contents: "A few months go by and you continue building more infrastructure with
      Terraform Cloud. The devops team are all familiar with terraform, but some members
      are unable to access the terraform cloud organization. Your manager Hiro steps
      into your cubicle with a clipboard in hand:\n\n\U0001F468\U0001F3FB‍\U0001F4BC
      Thank you for all your hard work on this terraform project. I'd like to have
      read access to your workspace, and we also need to get Lars and Aisha set up.
      Can you please create some teams in our organization and add your co-workers
      to them?"
  - type: image
    url: https://storage.cloud.google.com/instruqt-hashicorp-tracks/terraform-cloud-aws/tfcloud_users_page.png?authuser=1
  - type: text
    contents: Teams and role-based access controls are a paid feature of Terraform
      Cloud. Your instructor will need to upgrade your organization to a free trial
      in order to complete this challenge.
  tabs:
  - title: Terraform Cloud
    type: external
    url: https://app.terraform.io
  difficulty: basic
  timelimit: 600
- slug: versioned-infrastructure
  id: k8udkz2bnf5f
  type: challenge
  title: "\U0001F4BB Version-Controlled Infrastructure"
  teaser: The team has grown and you need to implement code reviews. Terraform Cloud
    can connect to popular Version Control Systems to enable collaboration and testing.
  assignment: |-
    In order for different teams and indivdiuals to be able to work on the same terraform code, you need to use a Version Control System (VCS). Terraform Cloud can integrate with the most popular VCS systems including GitHub, GitLab and Bitbucket.

    You will need a free GitHub.com account for this challenge. We recommend using a personal account for training instead your work account (if you have one).

    In this challenge your first task is to create a fork of the hashicat-aws repository. Visit this URL and click on the **Fork** button in the upper right corner to create your own copy of the repo.

    https://github.com/hashicorp/hashicat-aws

    Now that you have your own copy of the hashicat-aws repo to work with, follow the **Configuring GitHub Access** section of the TFC documentation to connect your GitHub account to your Terraform Organization.

    https://www.terraform.io/docs/cloud/vcs/github.html

    Once you've configured GitHub access, you can update your workspace to use your hashicat-aws repository as the source for all Terraform runs. Go into the **Settings > Version Control** settings page for your workspace. Connect your workspace to the fork of your hashicat-aws repository on GitHub. You can leave all the VCS settings at their defaults.

    Now you can test your work by triggering the first VCS driven terraform run. Click the **Queue Plan** button and enter "Github Integration" for the reason.

    Congratulations, all Terraform changes must now go through version control before they are used in your workspace. This enables you to do code reviews before any changes are pushed to production. It also provides a valuable record of any and all changes made to the code that built your infrastructure. This can prevent configuration drift and undocumented changes.

    Click the **Check** button to let Jane know she can clone the hashicat-aws repo for QA testing.
  notes:
  - type: text
    contents: "As terraform usage continues to increase across the organization, your
      team needs a better way to store and organize everyone's terraform code. Until
      now you haven't had much testing or code review for infrastructure changes.
      Jane, the QA lead, introduces herself:\n\n\U0001F469‍\U0001F3A4 Hi devops admin,
      we're trying to implement better quality assurance around our infrastructure
      deployment process. Can you help me add the hashicat-aws GitHub repository to
      the workspace so we can implement code reviews?"
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8080
  - title: Configuring Github Access
    type: external
    url: https://www.terraform.io/docs/cloud/vcs/github.html
  - title: Terraform Cloud
    type: external
    url: https://app.terraform.io
  difficulty: basic
  timelimit: 600
- slug: this-is-the-end
  id: fckoj2szdzcm
  type: challenge
  title: The End - That's All Folks!
  teaser: You have reached the end of this workshop.
  assignment: This is just a placeholder right now.
  notes:
  - type: video
    url: https://www.youtube.com/embed/gBzJGckMYO4
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8080
  difficulty: basic
  timelimit: 600
checksum: "13928427858698719887"
