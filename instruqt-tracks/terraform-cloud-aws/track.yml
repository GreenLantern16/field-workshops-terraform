slug: terraform-cloud-aws
id: 2hgi8e9hftli
type: track
title: Terraform Cloud with AWS
teaser: Join the ACME devops team on their journey to fully automated provisioning
  with AWS Cloud.
description: |-
  Work with the devops team at Acme Inc. as they go from manual provisioning with Terraform to a fully automated devops workflow with code reviews, testing, and automated provisioning in AWS Cloud. This workshop covers the following topics:

  * Terraform Open Source
  * Terraform Cloud
  * Remote State
  * Secure Variable Storage
  * Version Control Integration
  * Role-based Access Controls
  * Sentinel Security Policies
  * Collaboration on Changes
  * Private Module Registry
icon: https://storage.googleapis.com/instruqt-hashicorp-tracks/logo/terraform.png
tags:
- terraform
- aws
- cloud
- enterprise
owner: hashicorp
developers:
- scarolan@hashicorp.com
private: true
published: true
challenges:
- slug: setup-our-environment
  id: kvtcvkhtdkf1
  type: challenge
  title: "\U0001F3E1 Moving in - Set Up Your Workspace"
  teaser: Configure your code editor with the HCL extension and open a workspace.
  assignment: |-
    Welcome to your first day as an intern at ACME Inc. [ACME](https://www.youtube.com/watch?v=9m7evoFF83c) is a multi-national conglomerate that sells anvils, rocket powered roller skates, deyhdrated boulders, earthquake pills and birdseed.

    After employee orientation you sit down at your workstation and open your text editor, Visual Studio Code.

    Open the Code Editor tab on the left.

    Select "File > Open Folder".

    Find the `hashicat-aws` directory in the Code Editor and hit `OK`.

    This is your terraform workspace.

    Now click on the box-shaped icon on the bottom of the left side menu. This opens the Extensions sidebar.

    Search for *hcl*. Install the first extension on the list. It is named `HCL`.

    Click on the blue **Reload Required** button to refresh the editor.

    Now click on the explorer icon on the top of the left side menu. It looks like a stack of documents.

    Congratulations, you've configured your environment to work with Terraform!
  notes:
  - type: text
    contents: "Welcome to your first day on the job at ACME Inc. Here are the members
      of your team:\n<center><table cellpadding=20>\n  <tr>\n    <td>\n    \U0001F9D5\U0001F3FD
      Aisha - Database Admin<br>\n    \U0001F46E\U0001F3FE‍♀️ Janet - Security<br>\n
      \   \U0001F468\U0001F3FB‍\U0001F9B2 Lars - Lead Developer<br>\n    </td>\n    <td>\n
      \   \U0001F9D3\U0001F3FB Robin - Operations<br>\n    \U0001F468\U0001F3FB‍\U0001F4BC
      Hiro - Product Manager<br>\n    \U0001F473\U0001F3FE‍♂️ Gaurav - Network Admin<br>\n
      \   </td>\n  </tr>\n</table></center>\n\n<center>\U0001F913 You - Brand New
      Intern\n</center>"
  - type: text
    contents: Most modern text editors support Terraform syntax highlighting.
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8080
  difficulty: basic
  timelimit: 600
- slug: open-a-terminal
  id: tdj4sxpvzupm
  type: challenge
  title: "\U0001F5A5️ Open a Terminal"
  teaser: Terraform commands are run from a terminal window. Terraform can be installed
    on Linux, Windows, or MacOS.
  assignment: |-
    Open a new Terminal window. You can use the "Terminal > New Terminal" menu item or the keyboard shortcut **CTRL-J** (**CMD-J** on Mac).

    All terraform commands should be run from the terminal within the Code Editor.

    Try the **CTRL-J** shortcut to toggle the terminal window open and closed.

    You can use the little caret ^ shaped button on the terminal pane to expand and shrink your Terminal window. This is useful for viewing logs.

    Click on the File Explorer icon a couple times to toggle the File Explorer on and off. This can provide more space while you're viewing and editing code.

    You can also hide and show these notes with the expand icon on the upper right side of the GUI. It looks like a box with two small arrows in the corners. This will expand and close the notes panel. Try it now to give your text editor more space.

    Try running the following command in your terminal pane:

    ```
    terraform version
    ```

    Good job, you're ready to deploy the hashicat application on AWS!
  notes:
  - type: text
    contents: The terraform command line tool is available for MacOS, FreeBSD, OpenBSD,
      Windows, Solaris and Linux.
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8080
  difficulty: basic
  timelimit: 600
- slug: terraform-cloud-setup
  id: bwxfyq4qboqt
  type: challenge
  title: ☁️ Terraform Cloud Setup
  teaser: Terraform Cloud offers unlimited free terraform state storage for users.
    Safeguard your state files by storing them remotely in Terraform Cloud.
  assignment: |-
    Sign up for a free Terraform Cloud account at the following URL:

    https://app.terraform.io/signup/account

    If you already have an account you can simply sign in with your existing credentials.

    Once you're signed into Terraform Cloud create a new organization called YOURNAME-training. Replace YOURNAME with your own name or other text.

    Next you'll be prompted to create a workspace. You can skip the VCS integration step by clicking the "No VCS Connection" button. Name your workspace **hashicat-aws**.

    Now go into the workspace's **Settings >> General** settings page and change the Execution Mode to local.  Be sure to save your settings! This will allow us to run terraform commands from our workstation with local variables.
  notes:
  - type: text
    contents: Terraform Cloud remote state storage is free for all users.
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8080
  difficulty: basic
  timelimit: 600
- slug: oh-no-an-outage
  id: isfxzosfx0p1
  type: challenge
  title: "\U0001F631 Oh No - An Outage!"
  teaser: An unexpected outage has taken down one of the production websites. How
    can Terraform help the team recover quickly?
  assignment: |-
    Your task is to configure remote state using your Terraform Cloud account. In order to complete this challenge you'll need the following:

    1. A free Terraform Cloud account - log in at https://app.terraform.io<br>
    2. An organization called **yourname-training**. Replace yourname with any string of letters or numbers.<br>
    3. A workspace named **hashicat-aws** with its Execution Mode set to **Local** (not Remote)<br>
    4. A *user* token for authentication<br>
    5. A `.terraformrc` file to store your user token<br>
    6. A `remote_backend` config stored in your workspace<br>

    We've given you a head start with templates for the `/root/.terraformrc` file and your `remote_backend.tf` configuration file. You will need to edit these files and insert your own token, organization and
    workspace names.

    Once you've got all the pieces in place, try running a `terraform init` and then `terraform apply` command in the terminal.

    When you're done you should see a new state file in your Terraform Cloud workspace.

    Report back to Robin with the *Check* button below once you've successfully deployed the hashicat application with remote state enabled.
  notes:
  - type: text
    contents: "It's Monday morning and you're the first one into the office. Most
      of your teammates were up late fixing last night's outage. Eventually senior
      operations admin Robin shows up at your desk.\n\n>\U0001F9D3 Hey kiddo, how
      are you doing? Listen, I want your help with something. Last night we had trouble
      rebuilding the website because the terraform state file was stored on Lars'
      laptop. And guess what, Lars is on vacation for the next two weeks. Why don't
      you help me configure remote state on this application so this doesn't happen
      again?"
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8080
  difficulty: basic
  timelimit: 600
checksum: "12182172046259630737"
