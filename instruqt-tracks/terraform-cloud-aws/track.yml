slug: terraform-cloud-aws
id: 2hgi8e9hftli
type: track
title: Terraform Cloud with AWS
teaser: Join the ACME devops team on their journey to fully automated provisioning
  with AWS Cloud.
description: |-
  Work with the devops team at Acme Inc. as they go from manual provisioning with Terraform to a fully automated devops workflow with code reviews, testing, and automated provisioning in AWS Cloud. This workshop covers the following topics:

  * Terraform Open Source
  * Terraform Cloud
  * Remote State
  * Secure Variable Storage
  * Version Control Integration
  * Role-based Access Controls
  * Sentinel Security Policies
  * Collaboration on Changes
  * Private Module Registry
  * API Driven Workflows
icon: https://storage.googleapis.com/instruqt-hashicorp-tracks/logo/terraform.png
tags:
- terraform
- aws
- cloud
- enterprise
owner: hashicorp
developers:
- scarolan@hashicorp.com
private: true
published: true
challenges:
- slug: setup-our-environment
  id: 8ptkcyuuh6r0
  type: challenge
  title: "\U0001F3E1 Moving in - Set Up Your Workspace"
  teaser: Configure your code editor for Terraform and open a workspace.
  assignment: |-
    Welcome to your first day as an intern at ACME Inc. [ACME](https://www.youtube.com/watch?v=9m7evoFF83c) is a multi-national conglomerate that sells anvils, rocket powered roller skates, portable holes, earthquake pills and birdseed.

    After employee orientation you sit down at your workstation and open your text editor, Visual Studio Code.

    Open the Code Editor tab on the left. First get familiar with the menus.

    Find the "hamburger" or triple-line menu on the top of the navigation bar on the left. It's right underneath the Instruqt mascot logo. This is your Main Menu. You can find all the other menu options here.

    Right below the Main Menu you'll see a column of icons. The first icon looks like a stack of documents. This is the File Explorer. Click on the File Explorer icon then select **Open Folder**.

    Select the `hashicat-aws` directory and hit `OK`.

    Next, enable the Terraform Language Server for syntax highlighting and other features. Click on the Main Menu and select **View >> Command Palette**, then type in `Terraform`.

    Select the option that says **Terraform: Install/Update Language Server**. Install the latest version of the language server from the list. Open the command palette again and select **Terraform: Enable/Disable Language Server**.

    Congratulations, you are ready to start working with Terraform on AWS. We'll use the hashicat-aws example app in the rest of the challenges as you learn new terraform skills.

    Click the **Check** button to continue.
  notes:
  - type: text
    contents: "Welcome to your first day on the job at ACME Inc. These are some of
      your coworkers in the local ACME office:\n<center><table cellpadding=20>\n  <tr>\n
      \   <td>\n    \U0001F468\U0001F3FB‍\U0001F4BC Hiro - Product Manager<br>\n    \U0001F9D5\U0001F3FD
      Aisha - Database Admin<br>\n    \U0001F46E\U0001F3FF‍♂️ William - InfoSec Lead<br>\n
      \   \U0001F468\U0001F3FB‍\U0001F9B2 Lars - Lead Developer<br>\n    </td>\n    <td>\n
      \   \U0001F9D3\U0001F3FB Robin - Operations Admin<br>\n    \U0001F469‍\U0001F3A4
      Jane - Quality Assurance<br>\n    \U0001F473\U0001F3FE‍♂️ Gaurav - Network Admin<br>\n
      \   \U0001F469\U0001F3FC‍\U0001F4BC Karen - Finance    </td>\n  </tr>\n</table></center>\n\n<center>\U0001F913
      You - Brand New Intern\n</center>"
  - type: text
    contents: Most modern text editors support Terraform syntax highlighting.
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8443
  difficulty: basic
  timelimit: 1800
- slug: open-a-terminal
  id: j5cp109wofoa
  type: challenge
  title: "\U0001F5A5️ Open a Terminal"
  teaser: Terraform commands are run from a terminal window. Terraform can be installed
    on Linux, Windows, or MacOS.
  assignment: |-
    Click on the Main Menu and select **Terminal > New Terminal** or use the keyboard shortcut **CTRL-J** (**CMD-J** on Mac).

    All terraform commands should be run from the terminal within the Code Editor.

    Try the **CTRL-J** shortcut to toggle the terminal window open and closed. If you don't see a command prompt in the terminal pane, simply click on the trash can icon and open a new terminal.

    You can use the little caret ^ shaped button on the terminal pane to expand and shrink your Terminal window. This is useful for viewing logs.

    Click on the File Explorer icon a couple times to toggle the File Explorer on and off. This can provide more space while you're viewing and editing code.

    You can also hide and show these notes with the expand icon on the upper right side of the GUI. It looks like a box with two small arrows in the corners. This will expand and close the notes panel. Try it now to give your text editor more space.

    NOTE: If you prefer a classic command line experience we've provided another tab titled **Terminal**. The vim text editor is also installed on your workstation.

    Good job, you're ready to deploy the hashicat application on AWS!
  notes:
  - type: text
    contents: The terraform command line tool is available for MacOS, FreeBSD, OpenBSD,
      Windows, Solaris and Linux.
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8443
  - title: Terminal
    type: terminal
    hostname: workstation
  difficulty: basic
  timelimit: 1800
- slug: terraform-cloud-setup
  id: flgornvw5xu5
  type: challenge
  title: ☁️ Terraform Cloud Setup
  teaser: Terraform Cloud offers unlimited free terraform state storage for users.
    Safeguard your state files by storing them remotely in Terraform Cloud.
  assignment: |-
    Sign up for a free Terraform Cloud account at the following URL:

    https://app.terraform.io/signup/account

    If you already have an account you can simply sign in with your existing credentials.

    Once you're signed into Terraform Cloud create a new organization called YOURNAME-training. Replace YOURNAME with your own name or other text.

    Next you'll be prompted to create a workspace. You can skip the VCS integration step by clicking the "No VCS Connection" button. Name your workspace **hashicat-aws**.

    Now go into the workspace's **Settings >> General** settings page and change the Execution Mode to local.  Be sure to save your settings! This will allow us to run terraform commands from our workstation with local variables.

    Finally, provide your instructor with your organization's name. They will upgrade your organization to unlock a 30 day free trial of all paid features.
  notes:
  - type: text
    contents: Terraform Cloud remote state storage is free for all users.
  tabs:
  - title: Terraform Cloud
    type: external
    url: https://app.terraform.io
  difficulty: basic
  timelimit: 1800
- slug: oh-no-an-outage
  id: 6ddjxvjdqigq
  type: challenge
  title: "\U0001F4D2 Safekeeping Your Terraform State"
  teaser: An unexpected outage has taken down one of the production websites. It took
    longer than expected to recover because the Terraform state file was stored on
    someone's laptop. Terraform Cloud's remote state feature is here to help.
  assignment: |-
    Your task is to configure remote state using your Terraform Cloud account. In order to complete this challenge you'll need the following:

    1. A free Terraform Cloud account - log in at https://app.terraform.io<br>
    2. An organization called **yourname-training**. Replace yourname with any string of letters or numbers.<br>
    3. A workspace named **hashicat-aws** with its Execution Mode set to **Local** (not Remote)<br>
    4. A *user* token for authentication<br>
    5. A `.terraformrc` file to store your user token<br>
    6. A `remote_backend` config stored in your workspace<br>

    We've given you a head start with templates for the `/root/.terraformrc` file and your `remote_backend.tf` configuration file. You will need to edit these files and insert your own token, organization and
    workspace names.

    Once you've got all the pieces in place, try running a `terraform init` and then `terraform apply` command in the terminal.

    When you're done you should see a new state file in your Terraform Cloud workspace.

    Report back to Robin with the *Check* button below once you've successfully deployed the hashicat application with remote state enabled.
  notes:
  - type: text
    contents: "It's Monday morning and you're the first one into the office. Most
      of your teammates were up late fixing last night's outage. Eventually senior
      operations admin Robin shows up at your desk.\n\n>\U0001F9D3 Hey kiddo, how
      are you doing? Listen, I want your help with something. Last night we had trouble
      rebuilding the website because the terraform state file was stored on Lars'
      laptop. And guess what, Lars is on vacation for the next two weeks. Why don't
      you help me configure remote state on this application so this doesn't happen
      again?"
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8443
  - title: Terminal
    type: terminal
    hostname: workstation
  - title: Terraform Cloud
    type: external
    url: https://app.terraform.io
  difficulty: basic
  timelimit: 1800
- slug: quiz-1
  id: pormukgjp0uy
  type: quiz
  title: "\U0001F4DD Quiz 1 - Terraform Remote State"
  teaser: A quiz about Terraform State
  assignment: |
    The terraform state file always matches exactly with your current infrastructure configuration.
  notes:
  - type: text
    contents: "\U0001F431 Congratulations! You've been promoted to Junior Admin.\n"
  answers:
  - "True"
  - "False"
  solution:
  - 1
  difficulty: basic
  timelimit: 1800
- slug: protecting-sensitive-variables
  id: kdpzdpk67mjx
  type: challenge
  title: "\U0001F510 Securing Cloud Credentials"
  teaser: Your team has started building cloud infrastructure on AWS, but the security
    team is concerned about protecting access to everyone's cloud credentials.
  assignment: |-
    After the AWS credentials issue, the security team is tightening down access to your AWS account. API keys must now be secured as stored variables in Terraform Cloud. Your task is to find your AWS Access Key ID and Secret Access Key, and move them into your workspace as secure environment variables.

    In order to complete this challenge you'll need to do the following:

    1. Find your AWS credentials with the following commands:

    ```
    echo $AWS_ACCESS_KEY_ID
    echo $AWS_SECRET_ACCESS_KEY
    ```
    2. Update the **Execution Mode** settings in your workspace to **Remote**.
    3. Change the **Apply Method** to Auto apply. This will save you the trouble of having to approve every terraform run manually. Remember to click the **Save** button at the bottom of the page!
    4. Set **Environment Variables** for your AWS credentials and mark them as **Sensitive**.
    5. Set **Terraform Variables** for your `prefix` and `region`. Learn more about these variables by looking in the variables.tf file.

    Test your work by running `terraform init`. Your backend configuration will be updated for remote execution.

    Next try running `terraform plan`. You should see a remote execution run begin on Terraform Cloud. A copy of the output will be streamed back to your terminal. Run a terraform apply to see it in action:

    ```
    terraform apply -auto-approve
    ```

    The `-auto-approve` flag will override the approval phase and go directly to the build.

    Congratulations, your AWS keys are now safely encrypted and stored in your Terraform Cloud workspace.

    You can continue to run `terraform plan` and `terraform apply` in your terminal, but the execution is now done in Terraform Cloud.
  notes:
  - type: text
    contents: "After a few weeks on the job you're starting to get into the rhythm
      of things. Write some code, run some tests, deploy the website. Everything's
      going great until someone's AWS keys are accidentally pushed to a public code
      repository. You get this email from William, the lead infosec admin at ACME:\n\n>\U0001F46E\U0001F3FF‍♂️
      Hello junior admin, we ran a remote scan on your laptop last night and found
      some unsecured AWS access keys. We need you to move those off your laptop and
      store them in Terraform Cloud by the end of the day."
  - type: text
    contents: "\U0001F914 Did you know?\n\nThousands of API and cryptographic keys
      are leaking on GitHub every day!\n\nhttps://nakedsecurity.sophos.com/2019/03/25/thousands-of-coders-are-leaving-their-crown-jewels-exposed-on-github/\n\nWhen
      you store your API keys as sensitive variables they are encrypted and stored
      in an instance of HashiCorp Vault. These keys are only decrypted in a trusted,
      secure container that runs the terraform command."
  - type: text
    contents: "\U0001F469\U0001F3FC‍\U0001F4BB Remote Execution, Local Code\n\nRemote
      Execution allows you to use the same terraform commands that you're familiar
      with, but the run and all your variables are safely stored in your Terraform
      Cloud workspace. This can be helpful when you're upgrading tools that were originally
      written for Terraform Open Source.\n\nWith Remote Execution your terraform code
      is still stored on your local machine and sent to the server each time you run."
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8443
  - title: Terminal
    type: terminal
    hostname: workstation
  - title: Terraform Cloud
    type: external
    url: https://app.terraform.io
  difficulty: basic
  timelimit: 1800
- slug: sharing-is-caring
  id: yxnc2r1zlmlg
  type: challenge
  title: "\U0001F91D\U0001F3FC Working with Teams in Terraform Cloud"
  teaser: As your Terraform usage increases more team members want to collaborate.
    Let's add some teams and access rules for our organization.
  assignment: |-
    Teams and role-based access controls are a paid feature of Terraform Cloud. Your instructor will need to upgrade your organization to a free trial in order to complete this challenge.

    In this challenge you'll create teams with different levels of access to your workspace. You can then invite other users to collaborate on code changes, approvals, and terraform runs.

    1. Go into your organization's General Settings and click on the **Teams** link.<br>
    2. Add a team called **admins**. Admins should be able to manage policies, manage workspaces, and manage VCS settings.<br>
    3. Add another team called **developers**. Developers should not have any organization-wide access.<br>
    4. Add a third team called **managers**. Managers should also not have any organization-wide access.

    Next, assign access rights to the hashicat-aws workspace. Go into the **Team Access** page of the hashicat-aws workspace settings.

    * Give the **admins** group admin level access.<br>
    * Give the **developers** group write level access.<br>
    * Give the **managers** group read level access.

    Now that you have created teams you can invite some users to your organization.

    If you're doing an instructor-led training, you can invite your instructor or a fellow student to your organization and place them on the developers team. You'll need the email address attached to their Terraform Cloud account to invite them.

    Or you can use one of our example users below:

    * `workshops+aisha@hashicorp.com`
    * `workshops+lars@hashicorp.com`
    * `workshops+hiro@hashicorp.com`

    Note that you will not see any users in your organization until they accept your invitations.

    You will need at least two users in your organization to pass this challenge.
  notes:
  - type: text
    contents: "A few months go by and you continue building more infrastructure with
      Terraform Cloud. The devops team are all familiar with terraform, but some members
      are unable to access the terraform cloud organization. Your manager Hiro steps
      into your cubicle with a clipboard in hand:\n\n>\U0001F468\U0001F3FB‍\U0001F4BC
      Thank you for all your hard work on this terraform project. I'd like to have
      read access to your workspace, and we also need to get Lars and Aisha set up.
      Can you please create some teams in our organization and add your co-workers
      to them?"
  - type: text
    contents: Teams and role-based access controls are a paid feature of Terraform
      Cloud. Your instructor will need to upgrade your organization to a free trial
      in order to complete this challenge.
  tabs:
  - title: Terraform Cloud
    type: external
    url: https://app.terraform.io
  difficulty: basic
  timelimit: 1800
- slug: quiz-2
  id: cnqr1iwueube
  type: quiz
  title: "\U0001F4DD Quiz 2 - Secure Variables"
  teaser: A quiz about secure variables
  assignment: |
    Where should you store sensitive credentials like API keys?
  notes:
  - type: text
    contents: "\U0001F63A Congratulations! You've been promoted to Sysadmin.\n"
  answers:
  - In your Terraform workspace
  - In a text file on your Desktop
  - As encrypted environment variables in Terraform Cloud
  - As terraform variables in Terraform Cloud
  solution:
  - 2
  difficulty: basic
  timelimit: 1800
- slug: versioned-infrastructure
  id: k8udkz2bnf5f
  type: challenge
  title: "\U0001F4BB Version Controlled Infrastructure"
  teaser: The team has grown and you need to implement code reviews. Terraform Cloud
    can connect to popular Version Control Systems to enable collaboration and testing.
  assignment: |-
    In order for different teams and indivdiuals to be able to work on the same terraform code, you need to use a Version Control System (VCS). Terraform Cloud can integrate with the most popular VCS systems including GitHub, GitLab and Bitbucket.

    You will need a free GitHub.com account for this challenge. We recommend using a personal account for training instead your work account (if you have one).

    In this challenge your first task is to create a fork of the hashicat-aws repository. Visit this URL and click on the **Fork** button in the upper right corner to create your own copy of the repo.

    https://github.com/hashicorp/hashicat-aws

    Run the following commands to update your git configuration for your own repository. Don't forget to replace YOURGITUSER with your own git username.

    ```
    git remote remove origin
    git remote add origin https://github.com/YOURGITUSER/hashicat-aws
    ```

    Next use these commands to set your email and name:
    ```
    git config --global user.email "you@example.com"
    ```

    ```
    git config --global user.name "Your Name"
    ```

    Now that you have your own copy of the hashicat-aws repo to work with, follow the **Configuring GitHub Access** section of the TFC documentation to connect your GitHub account to your Terraform Organization.

    https://www.terraform.io/docs/cloud/vcs/github.html

    Once you've configured GitHub access, you can update your workspace to use your hashicat-aws repository as the source for all Terraform runs. Go into the **Settings > Version Control** settings page for your workspace. Connect your workspace to the fork of your hashicat-aws repository on GitHub. You can leave all the VCS settings at their defaults.

    The first VCS-backed apply should trigger immediately. Click on the Runs tab to view the run in action.

    Congratulations, all Terraform changes must now go through version control before they are used in your workspace. This enables you to do code reviews before any changes are pushed to production. It also provides a valuable record of any and all changes made to the code that built your infrastructure. This can prevent configuration drift and undocumented changes.

    Click the **Check** button to let Jane know she can clone the hashicat-aws repo for QA testing.
  notes:
  - type: text
    contents: "As terraform usage continues to increase across the organization, your
      team needs a better way to store and organize everyone's terraform code. Until
      now you haven't had much testing or code review for infrastructure changes.
      Jane, the QA lead, introduces herself:\n\n>\U0001F469‍\U0001F3A4 Hi sysadmin,
      we're trying to implement better quality assurance around our infrastructure
      deployment process. Can you help me add the hashicat-aws GitHub repository to
      the workspace so we can implement code reviews?"
  - type: text
    contents: |-
      Once you connect a VCS repository to your Terraform Cloud workspace, **all** changes to the code must be stored in the VCS before terraform will execute them. This ensures that you have no unauthorized changes to your infrastructure as code.

      In addition it allows you to enable features like code reviews, pull requests, and automated testing of your code.
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8443
  - title: Terminal
    type: terminal
    hostname: workstation
  - title: Configuring Github Access
    type: external
    url: https://www.terraform.io/docs/cloud/vcs/github.html
  - title: Terraform Cloud
    type: external
    url: https://app.terraform.io
  difficulty: basic
  timelimit: 1800
- slug: vcs-collaboration
  id: dmgbzbeplipi
  type: challenge
  title: "\U0001F46C Collaborating with VCS"
  teaser: Now that you've got your version control system configured with Terraform
    Cloud, you can collaborate on changes to your terraform built infrastructure.
  assignment: |-
    In this challenge you'll make a small change to the code that deploys the hashicat-aws application, and then create a "Pull Request", which is simply a way of proposing a change and optionally allowing others to review your changes.

    Find a partner, or if you're alone you can do this exercise solo. Exchange github usernames and browse to the other person's fork of the hashicat-aws repository. For example:

    https://github.com/YOURNAME/hashicat-aws

    Browse to the `files/deploy_app.sh` file and click on the small pencil icon in the upper right corner of the text area. This will allow you to edit the file right in your browser.

    Replace the following text with your own catchy marketing slogan for ACME.

    ```
    Welcome to ${PREFIX}'s app. Replace this text with your own.
    ```

    Finally at the bottom of the screen, select the option that says "Create a new branch for this commit and start a pull request."

    Your partner should now review and approve the pull request. Or if you're working alone you can review your own pull request and merge the changes.

    Once you've merged your changes to the master branch, watch the Terraform run that starts in the UI.
  notes:
  - type: text
    contents: "The marketing team at ACME is running a special promotion next week
      and they need you to push a change to the hashicat website. If you're doing
      an instructor led class you can pair up with a fellow student for this exercise.
      Alternatively you can do the exercise on your own.\n\n>\U0001F468\U0001F3FB‍\U0001F9B2
      Hey sysadmin friend, we need to push a change to the hashicat website. Can you
      please update the placeholder text with some snappy marketing slogans?"
  - type: text
    contents: VCS-backed workspaces enable features like code reviews and automated
      tests that must pass before any changes can be approved for production.
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8443
  - title: Terminal
    type: terminal
    hostname: workstation
  - title: Terraform Cloud
    type: external
    url: https://app.terraform.io
  difficulty: basic
  timelimit: 1800
- slug: a-sentinel-stands-guard
  id: mk8s69dbnqk8
  type: challenge
  title: "\U0001F6E1️ Terraform Compliance with Sentinel"
  teaser: Developers in your organization are building cloud resources without tagging
    them properly. You need a way to enforce tagging on all your AWS instances that
    are built with Terraform. Meet Sentinel, the compliance and security rules engine
    for Terraform.
  assignment: |-
    In this challenge you'll use Sentinel to enforce a rule that requires any AWS instance created in your account to have the correct billable and department tags.

    ### Challenge Setup
    1. Before configuring Sentinel you'll need to queue up a Destroy run. You must create a special environment variable named `CONFIRM_DESTROY` in your workspace to enable this. Set the value of this environment variable to `1`. Now you can use the **Settings >> Destruction and Deletion** menu to queue a destroy plan. Do not click the red **Delete from Terraform Cloud** button!!! Instead, click on **Queue Destroy Plan** and confirm it if necessary.

    2. Create a fork of the following GitHub repo, which contains a Sentinel Policy Set that you can use in your own organization. As you did with the hashicat-aws repo, use the **Fork** button in the upper right corner of the screen to create your own copy.

    https://github.com/hashicorp/tfc-workshops-sentinel

    3. Go into the **Organization Settings** for your training organization and click on **Policy Sets**.

    4. Use the **Connect a new policy set** button to connect your new GitHub repo to your organization. Remember, the repository is named **tfc-workshops-sentinel**.

    5. Under **Description** you can enter "Sentinel Policies for our AWS resources".

    6. In the **More Options** menu set the **Policies Path** to `/aws`. This tells Terraform Cloud to use the AWS specific policies that are stored in the repo.

    6. Leave everything else at its default setting and click on the **Connect Policy Set** button at the bottom of the page.

    You are now ready to begin the challenge.

    ### The Challenge

    Update your code so that any `aws_instance` resources are properly tagged with the **Billable** and **Department** tags. You can set the Billable tag to "true" and the Department tag to "devops".

    If you need a git refresher, here are the commands you'll need to push a change to your forked repo:

    ```
    git add .
    git commit -m "Updated my code."
    git push origin master
    ```

    These commands mean "Stage all my changes, commit them to the local git repo, then push them to the master branch of the remote repo."

    Each time you push a change to master, you'll trigger a new terraform run. Keep trying until you pass the Sentinel policy check.
  notes:
  - type: text
    contents: "Developers love working in the cloud but sometimes they forget to tag
      their instances with the right billing and department codes. Karen from finance
      pays you a visit to see if you can help:\n\n>\U0001F469\U0001F3FC‍\U0001F4BC\U0001F4C8
      Hello sysadmin, we got a really big AWS bill last month and we have no idea
      how much we can bill back to the department who requested this stuff. I have
      a report that is supposed to show this stuff but it only works if everybody
      tags their resources properly. Can you make sure all your folks are properly
      tagging their cloud resources?"
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8443
  - title: Terminal
    type: terminal
    hostname: workstation
  difficulty: basic
  timelimit: 1800
- slug: quiz-3
  id: 6vbyf7ebvrjq
  type: quiz
  title: "\U0001F4DD Quiz 3 - Version Control and Terraform"
  teaser: A quiz about version control
  assignment: |
    VCS-backed workspaces enable the following features (choose two)
  notes:
  - type: text
    contents: "\U0001F431‍\U0001F464 Congratulations! You've been promoted to Senior
      Sysadmin.\n"
  answers:
  - Code reviews
  - Cost estimation
  - Automated testing of terraform code
  - Terraform provisioners
  solution:
  - 0
  - 2
  difficulty: basic
  timelimit: 1800
- slug: private-module-registry
  id: lywcpik6oyjo
  type: challenge
  title: "\U0001F4DA Private Module Registry"
  teaser: Some of your users want a simple way to deploy databases and network configurations.
    Enter the Private Module Registry, where you can store standard, re-usable terraform
    configurations that others can use in their own workspaces.
  assignment: |-
    In this challenge you'll learn to use the Private Module Registry, which allows you to store and version re-usable snippets of Terraform code. Think of modules like custom resources for your own environment.

    Instead of writing this module from scratch you can copy the existing vpc module from the public Terraform registry. Visit this URL to view the VPC module:

    https://registry.terraform.io/modules/terraform-aws-modules/vpc/aws

    Note the **Source:** link that points at the github repository for this module. Click on the Source URL. As you did in previous challenges, create your own fork of this repository with the **Fork** button.

    Back in the Terraform Cloud control panel, click on the **Modules** link at the top of the page. Click on the **+Add Module** button. Click on the Github button and select the terraform-aws-vpc module that you just forked.

    Click on **Publish Module**.

    Create a new terraform file called `vpc.tf` and use the module in this file to create a new VPC for Gaurav.

    After you have saved the `vpc.tf` file, commit it to your local git repository and push the changes to your remote fork. You will be prompted to log onto your github account to push the change.

    ```
    git add .
    git commit -m "Added VPC module"
    git push origin master
    ```

    HINT: The docs are your friend. They might even have an example of how the code should look.

    If all went well you should see a new VPC being built in the console output. Click the `Check` button to verify your work.
  notes:
  - type: text
    contents: "Most of the devops team is using terraform to build and configure their
      infrastructure. Recently users from outside the team have been requesting help
      building their own workspaces. Gaurav, the database admin, sees you at lunch
      and asks for your help:\n>\U0001F473\U0001F3FE‍♂️ Hi senior sysadmin, I need
      to configure a lot of AWS VPCs and I heard you have a terraform module for this.
      Can you help me set up a new VPC in the hashicat-aws workspace?"
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8443
  - title: Terminal
    type: terminal
    hostname: workstation
  - title: Terraform Cloud
    type: external
    url: https://app.terraform.io
  difficulty: basic
  timelimit: 1800
- slug: api-driven-workflows
  id: y1kjttjfggdv
  type: challenge
  title: "\U0001F517 API Driven Workflows"
  teaser: Terraform Cloud has a fully featured RESTful API that you can use to integrate
    with external systems. Where we're going, we don't need a GUI!
  assignment: |-
    In the final challenge you'll directly interact with the Terraform Cloud API. Terraform Cloud has a rich API that lets you do everything you can do in the GUI and more. Intermediate and advanced users utilize the API to create complex integrations that work with external systems.

    Your goal is to configure three variables in the hashicat-aws workspace and then trigger a terraform run using only the API. The three variables you need to configure are:
    - `placeholder` An image placeholder URL. Examples: placekitten.com, placedog.net, picsum.photos
    - `height` The height in pixels for your image. Set this to 600
    - `width` The width in pixels for your image. Set this to 800
    If you've already configured any of the three variables in the UI please delete them before starting the challenge.
    ### Challenge Setup:
    Run this command to fetch your token and store it as the TOKEN environment variable:
    ```
    export TOKEN=$(grep token /root/.terraformrc | cut -d '"' -f2)
    ```
    Next set your ORG variable with the following command, replacing MYORGNAME with your own:
    ```
    export ORG="MYORGNAME"
    ```
    Finally, fetch your workspace id with the following curl command. Curl is a command line tool that is handy for interacting directly with APIs. Note how your TOKEN and ORG variables are automatically embedded in the command:
    ```
    curl -s --header "Authorization: Bearer $TOKEN" --header "Content-Type: application/vnd.api+json"   https://app.terraform.io/api/v2/organizations/$ORG/workspaces/hashicat-aws | jq -r .data.id
    ```
    Copy or save this workspace ID somewhere as you will need it during the challenge.
    ### The Challenge:
    Use the four *.json files located in the json directory to update your variables and trigger a terraform plan/apply. Use the terraform API docs to determine which commands to run. You can edit the files in your text editor to customize them for your workspace.

    HINT: The global find-and-replace (magnifying glass icon) allows you to replace text across all the files in your workspace at once.

    When you've succesfully triggered a run via the API with the new variables, click the Check button to continue.
  notes:
  - type: text
    contents: "You've mostly been using the Terraform Cloud Web UI and command line
      interface (CLI) to build infrastructure. The devops team needs to integrate
      with their CI/CD tool via the API. Lars sends you a chat message:\n\n>\U0001F468\U0001F3FB‍\U0001F9B2
      Hey senior sysadmin, we have this new continuous integration tool that the developers
      are using to test their application code. I'd like you to test some API calls
      to our Terraform Cloud organization and workspaces. Can you please take a look
      at this and learn how the API works?"
  - type: text
    contents: |-
      Feeling stuck? Remember that the Terraform Cloud docs contain examples for all API endpoints:
      https://www.terraform.io/docs/cloud/api/variables.html#create-a-variable
      https://www.terraform.io/docs/cloud/api/run.html#create-a-run
  - type: text
    contents: |-
      Here are some other fun placeholder sites you can try with the *placeholder* variable:
      placedog.net<br>
      placebear.com<br>
      www.fillmurray.com<br>
      www.placecage.com<br>
      placebeard.it<br>
      loremflickr.com<br>
      baconmockup.com<br>
      placeimg.com<br>
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8443
  - title: Terminal
    type: terminal
    hostname: workstation
  - title: Terraform Cloud
    type: external
    url: https://app.terraform.io
  difficulty: basic
  timelimit: 1800
- slug: quiz-4
  id: qaueezfzunpd
  type: quiz
  title: "\U0001F4DD Quiz 4 - Private Module Registry"
  teaser: A quiz about the private module registry
  assignment: |
    The Terraform private module registry automatically syncs modules from the public registry.
  notes:
  - type: text
    contents: "\U0001F431‍\U0001F4BB Congratulations! You've been promoted to Terraform
      Cloud Ninja."
  answers:
  - "True"
  - "False"
  solution:
  - 1
  difficulty: basic
  timelimit: 1800
- slug: this-is-the-end
  id: fckoj2szdzcm
  type: challenge
  title: "\U0001F469\U0001F3FB‍\U0001F52C Open Lab"
  teaser: Use this challenge to explore more on your own.
  assignment: Congratulations, you've learned all the major features of Terraform
    Cloud. You can continue to build and experiment with Terraform, or simply click
    the Check button to complete the track.
  notes:
  - type: video
    url: https://www.youtube.com/embed/gBzJGckMYO4
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8443
  - title: Terminal
    type: terminal
    hostname: workstation
  difficulty: basic
  timelimit: 1800
checksum: "18364091337516820735"
