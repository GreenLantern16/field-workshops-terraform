#!/bin/bash
# TODO - DRY this out a bit.
source /etc/profile.d/instruqt-env.sh
source /root/.bashrc
/bin/set-workdir /root/hashicat-aws

# Get our TFC token and organization from the local config files
TOKEN=$(grep token /root/.terraformrc | cut -d '"' -f2)
ORG=$(grep organization /root/hashicat-aws/remote_backend.tf | cut -d '"' -f2)

# These are the terraform cloud IDs of our fictional users. They are persistent and should not be deleted from TFC.
# LARS_ID="user-V2Qt225RgAUzsWpz"
# HIRO_ID="user-egHewG9Z5eNa9u9m"
# AISHA_ID="user-CsBb94bVHrq7E5AA"

# Get our team IDs. In the test environment these teams are pre-created.
ADMINS_TEAM_ID=$(curl -s --header "Authorization: Bearer $TOKEN" --header "Content-Type: application/vnd.api+json" --request GET https://app.terraform.io/api/v2/organizations/$ORG/teams | jq -r '.data | .[] | select(.attributes.name|test("admins")) | .id')

DEVS_TEAM_ID=$(curl -s --header "Authorization: Bearer $TOKEN" --header "Content-Type: application/vnd.api+json" --request GET https://app.terraform.io/api/v2/organizations/$ORG/teams | jq -r '.data | .[] | select(.attributes.name|test("developers")) | .id')

MANAGERS_TEAM_ID=$(curl -s --header "Authorization: Bearer $TOKEN" --header "Content-Type: application/vnd.api+json" --request GET https://app.terraform.io/api/v2/organizations/$ORG/teams | jq -r '.data | .[] | select(.attributes.name|test("managers")) | .id')

# Fetch our workspace ID
WORKSPACE_ID=$(curl -s --header "Authorization: Bearer $TOKEN" --header "Content-Type: application/vnd.api+json" --request GET https://app.terraform.io/api/v2/organizations/$ORG/workspaces/hashicat-aws | jq -r .data.id)

# Check if the admins team has been attached to the workspace with correct access
ADMINS_ACCESS=$(curl -s --header "Authorization: Bearer $TOKEN" --header "Content-Type: application/vnd.api+json" --request GET "https://app.terraform.io/api/v2/team-workspaces?filter%5Bworkspace%5D%5Bid%5D=$WORKSPACE_ID" | jq -r --arg ADMINS_TEAM_ID "$ADMINS_TEAM_ID" '.data | .[] | select(.relationships.team.data.id | test($ADMINS_TEAM_ID)) | .attributes.access')

[[ $ADMINS_ACCESS == admin ]] || fail-message "Oops, it looks like your admins group has not been set up correctly yet. Give the admins group admin rights on the hashicat-aws workspace."

# Check if the managers team has been attached to the workspace with correct access
MANAGERS_ACCESS=$(curl -s --header "Authorization: Bearer $TOKEN" --header "Content-Type: application/vnd.api+json" --request GET "https://app.terraform.io/api/v2/team-workspaces?filter%5Bworkspace%5D%5Bid%5D=$WORKSPACE_ID" | jq -r --arg MANAGERS_TEAM_ID "$MANAGERS_TEAM_ID" '.data | .[] | select(.relationships.team.data.id | test($MANAGERS_TEAM_ID)) | .attributes.access')

[[ $MANAGERS_ACCESS == read ]] || fail-message "Oops, it looks like your managers group has not been set up correctly yet. Give the managers group read rights on the hashicat-aws workspace."

# Check if the developers team has been attached to the workspace with correct access
DEVS_ACCESS=$(curl -s --header "Authorization: Bearer $TOKEN" --header "Content-Type: application/vnd.api+json" --request GET "https://app.terraform.io/api/v2/team-workspaces?filter%5Bworkspace%5D%5Bid%5D=$WORKSPACE_ID" | jq -r --arg DEVS_TEAM_ID "$DEVS_TEAM_ID" '.data | .[] | select(.relationships.team.data.id | test($DEVS_TEAM_ID)) | .attributes.access')

[[ $DEVS_ACCESS == write ]] || fail-message "Oops, it looks like your developers group has not been attached to your workspace yet. Give the developers group write access to the hashicat-aws workspace."

# Check the number of users in the org
USERS=$(curl -s --header "Authorization: Bearer $TOKEN" --header "Content-Type: application/vnd.api+json" https://app.terraform.io/api/v2/organizations/$ORG/organization-memberships | jq -r '.data | length')

[[ $USERS -gt 1 ]] || fail-message "Oops, it looks like you haven't added any other users to your organization. Invite at least one user to your org and put them on a team."

# These tests are a bit impractical, instead we just check the number of users in the organization.

# # Does the admins team exist and is Lars on the team
# ADMINS_CHECK=$(curl -s --header "Authorization: Bearer $TOKEN" --header "Content-Type: application/vnd.api+json" --request GET https://app.terraform.io/api/v2/organizations/$ORG/teams | jq --arg LARS_ID "$LARS_ID" -r '.data | .[] | select(.attributes.name|test("admins")) | .relationships.users.data | .[] | select(.id | test($LARS_ID)) | .id')

# [[ $ADMINS_CHECK = $LARS_ID ]] || fail-message "Oops, we couldn't find an admins team with Lars as a member. Check your settings and try again"

# # Does the developers team exist and is Aisha on the team
# DEVS_CHECK=$(curl -s --header "Authorization: Bearer $TOKEN" --header "Content-Type: application/vnd.api+json" --request GET https://app.terraform.io/api/v2/organizations/$ORG/teams | jq --arg AISHA_ID "$AISHA_ID" -r '.data | .[] | select(.attributes.name|test("developers")) | .relationships.users.data | .[] | select(.id | test($AISHA_ID)) | .id')

# [[ $DEVS_CHECK = $AISHA_ID ]] || fail-message "Oops, we couldn't find an developers team with Aisha as a member. Check your settings and try again"

# # Does the managers team exist and is Hiro on the team
# MANAGERS_CHECK=$(curl -s --header "Authorization: Bearer $TOKEN" --header "Content-Type: application/vnd.api+json" --request GET https://app.terraform.io/api/v2/organizations/$ORG/teams | jq --arg HIRO_ID "$HIRO_ID" -r '.data | .[] | select(.attributes.name|test("managers")) | .relationships.users.data | .[] | select(.id | test($HIRO_ID)) | .id')

# [[ $MANAGERS_CHECK = $HIRO_ID ]] || fail-message "Oops, we couldn't find an managers team with Hiro as a member. Check your settings and try again"

