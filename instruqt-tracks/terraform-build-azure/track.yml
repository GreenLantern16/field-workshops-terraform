slug: terraform-build-azure
id: u38r24o3ett6
type: track
title: Intro to Terraform on Azure
teaser: Provision the HashiCat application on Azure Cloud using Terraform.
description: "This track will introduce you to Terraform on Microsoft Azure.\n\nWe'll
  learn Terraform setup, basic commands, and gradually build an entire application
  stack.\n\nWhen you're finished you'll be able to view the HashiCat application in
  your web browser.\n\nKittens as a Service! \U0001F63A"
icon: https://storage.googleapis.com/instruqt-hashicorp-tracks/logo/terraform.png
tags:
- terraform
- azure
- basics
owner: hashicorp
developers:
- scarolan@hashicorp.com
private: true
published: true
challenges:
- slug: setup-our-environment
  id: 5qygxzik7w3a
  type: challenge
  title: "\U0001F3E1 Moving in - Set Up Your Workspace"
  teaser: Configure your code editor with the HCL extension and open a workspace.
  assignment: |-
    Open the Code Editor tab on the left. First get familiar with the menus.

    Find the "hamburger" or triple-line menu on the top of the navigation bar on the left. It's right underneath the Instruqt mascot logo. This is your Main Menu. You can find all the other VSC menu options here.

    Right below the Main Menu you'll see a column of icons. The first icon looks like a stack of documents. This is the File Explorer. Click on the File Explorer icon then select **Open Folder**.

    Select the `hashicat-azure` directory and hit `OK`.

    Next you can enable the Terraform Language Server for syntax highlighting and other features. Click on the Main Menu and select **View >> Command Palette**, then type in `Terraform`.

    Select the option that says **Terraform: Enable/Disable Language Server**. You only need to click this once. It will activate in the background and generate a couple of notifications.

    Congratulations, you are ready to start working with Terraform on Azure. We'll use the hashicat-azure example app in the rest of the challenges as you learn new terraform skills.

    Click the **Check** button to continue.
  notes:
  - type: text
    contents: |
      Setting up your environment...
      Keep an eye on the bottom right corner to know when you can get started.
  - type: text
    contents: The terraform command line tool is available for MacOS, FreeBSD, OpenBSD,
      Windows, Solaris and Linux.
  - type: text
    contents: The terraform language is designed to be both human and machine-readable.
  - type: text
    contents: Most modern text editors support Terraform syntax highlighting.
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8443
  difficulty: basic
  timelimit: 600
- slug: open-a-terminal
  id: o8yjfzmw5gep
  type: challenge
  title: "\U0001F5A5️ Open a Terminal"
  teaser: Terraform commands are run from a terminal window. Terraform can be installed
    on Linux, Windows, or MacOS.
  assignment: |-
    Click on the Main Menu and select **Terminal > New Terminal** or use the keyboard shortcut **CTRL-J** (**CMD-J** on Mac).

    All terraform commands should be run from the terminal within the Code Editor.

    Try the **CTRL-J** shortcut to toggle the terminal window open and closed.

    You can use the little caret ^ shaped button on the terminal pane to expand and shrink your Terminal window. This is useful for viewing logs.

    Click on the File Explorer icon a couple times to toggle the File Explorer on and off. This can provide more space while you're viewing and editing code.

    You can also hide and show these notes with the expand icon on the upper right side of the GUI. It looks like a box with two small arrows in the corners. This will expand and close the notes panel. Try it now to give your text editor more space.
  notes:
  - type: text
    contents: The terraform command line tool is available for MacOS, FreeBSD, OpenBSD,
      Windows, Solaris and Linux.
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8443
  difficulty: basic
  timelimit: 600
- slug: hello-terraform
  id: 8oijwcqnww0h
  type: challenge
  title: "\U0001F44B Getting to Know Terraform"
  teaser: Learn terraform basics and command line syntax.
  assignment: |-
    **Goal**: Familiarise yourself with the terraform CLI<br>
    **Estimated Time**: 1-2 minutes

    Let's start with some basic terraform commands.
    Run the following commands in the terminal on the left.
    Check the version of Terraform running on your machine:
    ```
    terraform version
    ```
    You can always get help if you're curious about command syntax:
    ```
    terraform help
    ```
    Terraform runs on Windows, OSX, or Linux. You can install it on your laptop or on a cloud based workstation. Terraform is also pre-installed in Azure Cloud Shell.

    Today we'll be using the preconfigured terraform workstation on the left for all our lab exercises.
  notes:
  - type: text
    contents: |-
      Terraform open source is a command line application that you can download and run from your laptop or virtual workstation.

      It is written in Go and runs on macOS, Linux or Windows. You can always download the latest version of terraform from https://www.terraform.io/downloads.html
  - type: text
    contents: |-
      Installing Terraform on your laptop or workstation is easy. You simply download the zip file, unpack it, and place it somewhere in your PATH.

      Check out this tutorial for step-by-step instructions:

      https://learn.hashicorp.com/terraform/getting-started/install.html

      We've pre-installed Terraform in your Instruqt lab environment for you.
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8443
  difficulty: basic
  timelimit: 600
- slug: azure-credentials
  id: ngqfp04xlppc
  type: challenge
  title: "\U0001F510 Connecting Terraform to Azure Cloud"
  teaser: Safely connect to the Azure APIs using a service principal.
  assignment: |-
    **Goal**: Understand methods for configuring Azure provider credentials.<br>
    **Estimated time**: 3-5 minutes.

    Terraform needs credentials to be able to connect to Azure and build resources.

    We've pre-installed some temporary credentials in your Instruqt training environment. These credentials are stored as environment variables. You should never store sensitive API keys inside your source code.

    Terraform can automatically read and use the environment variables that are in your shell environment.

    Run the following command to see your temporary credentials:
    ```
    env | grep ARM_CLIENT
    ```

    *Do not ever store your credentials in source code files*, as they can be accidentally exposed or copied to a public repository.
  notes:
  - type: text
    contents: |-
      Microsoft has a great tutorial for setting up Azure credentials on your laptop or virtual workstation:
      https://docs.microsoft.com/en-us/azure/virtual-machines/linux/terraform-install-configure
  - type: text
    contents: |-
      Azure Cloud Shell is another easy way to get started with Terraform. With Azure Cloud Shell, terraform is pre-installed and ready to go.
      https://docs.microsoft.com/en-us/azure/virtual-machines/linux/terraform-install-configure#use-azure-cloud-shell
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8443
  difficulty: basic
  timelimit: 600
- slug: terraform-code
  id: 8b3nazy7xvxq
  type: challenge
  title: "\U0001F468‍\U0001F4BB What does Terraform code look like?"
  teaser: The terraform DSL (Domain Specific Language) is a declarative language that
    lets you build almost any type of infrastructure.
  assignment: |-
    We've downloaded some terraform code onto your workstation. Run the following command to see the terraform code files:
    ```
    ls *.tf
    ```
    The same files are visible in the file explorer pane on the left. Terraform files are marked with the purple T icon.

    Terraform code always ends with a `.tf` extension. You can have as many terraform files as you want, but these three are commonly created first:

    **main.tf** - Where most of your terraform code is stored. This is the part that does the building of resources.<br>
    **variables.tf** - Use this file to define which variables will be available to your users.<br>
    **outputs.tf** - This file contains outputs that will be shown at the end of a successful terraform run.

    Files that end in anything other than `*.tf` or `*.tfvars` are ignored by Terraform.
  notes:
  - type: text
    contents: |-
      Terraform will read anything in the current directory that ends in `*.tf` or `*.tfvars`.

      By convention most terraform workspaces will contain `main.tf`, `variables.tf`, and `outputs.tf` files.

      You can also group your terraform code into files by purpose. For example, you might place all your load balancer configuration code into a file called `load_balancer.tf`.
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8443
  difficulty: basic
  timelimit: 600
- slug: tf-init-provider
  id: fjqlffgwsahm
  type: challenge
  title: ☁️ Terraform Init - Install the Azure Provider
  teaser: Terraform needs a provider to talk to cloud APIs. The provider is the bridge
    that connects terraform core to your infrastructure providers.
  assignment: |-
    We have downloaded some terraform code for the HashiCat application. We'll be using this source code for the rest of the track.

    Before we can do anything with terraform we need to initialize our workspace. Run the following command in your terminal window:
    ```
    terraform init
    ```
    The *terraform init* command scans your terraform code, identifies any providers that are needed, and downloads them.

    Run the following command to take a peek inside the `.terraform` directory:
    ```
    ls .terraform/plugins/linux_amd64/
    ```
    This hidden directory is where all modules and plugins are stored.
  notes:
  - type: text
    contents: |-
      The terraform core program isn't very useful by itself. Terraform needs the help of a *provider* to be able to talk to cloud APIs. Terraform has hundreds of different providers. You can browse the provider list here:

      https://www.terraform.io/docs/providers/index.html

      Today we'll be using the *azurerm* provider. AzureRM stands for Azure Resource Manager.
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8443
  difficulty: basic
  timelimit: 600
- slug: provider-quiz
  id: hplqnlk4dxar
  type: quiz
  title: "\U0001F4DD Quiz 1 - Providers and Modules"
  teaser: A quiz about Terraform init
  assignment: |
    Where does Terraform store its modules and providers?
  notes:
  - type: text
    contents: |
      It's quiz time!
  answers:
  - In the /tmp directory
  - In the user's home directory
  - In the .terraform directory
  - None of the above
  solution:
  - 2
  difficulty: basic
  timelimit: 600
- slug: tf-validate
  id: thzyufj1wzsc
  type: challenge
  title: "\U0001F469‍⚖️ Terraform Validate - Test Your Code"
  teaser: Terraform has a built in validation tester. This is useful to see whether
    your Terraform code is valid and parses correctly.
  assignment: |-
    Terraform comes with a built-in subcommand called *validate*. This is useful when you want to do a quick syntax check of your code to make sure it parses correctly.

    Click on the File Explorer icon on the left. It looks like a stack of papers.

    Edit the main.tf file and remove the curly brace on line 4 of the file.

    Validate your code:

    ```
    terraform validate
    ```

    Now put the curly brace back onto line 4 and run the validate command again. This time you should pass the validation test.

    **terraform validate** is most often used in automated CI/CD test pipelines. It allows you to quickly catch errors in your code before any other steps are taken.
  notes:
  - type: text
    contents: Terraform has a built-in syntax checker. You can run it with the `terraform
      validate` command.
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8443
  difficulty: basic
  timelimit: 600
- slug: tf-plan
  id: pfwkjcqfkx4o
  type: challenge
  title: "\U0001F914 Terraform Plan - Dry Run Mode"
  teaser: Terraform has a dry run mode where you can preview what will be built without
    actually creating any resources. In this challenge we'll run terraform plan and
    view the output.
  assignment: |-
    Run the **terraform plan** command:
    ```
    terraform plan
    ```
    When you run this command terraform will prompt you to enter the `prefix` variable.

    Enter a short string of lower-case letters and/or numbers. You can use your own name here if you wish.

    **Keep your prefix string all lower case, and between 5-12 characters long. Do not use an underscore in your prefix.**

    The prefix will become part of your application hostname, and therefore must be DNS-compliant. Valid characters for hostnames are ASCII(7) letters from a to z, the digits from 0 to 9, and the hyphen (-).  A hostname may not start with a hyphen.
  notes:
  - type: text
    contents: |-
      `terraform plan` allows you to preview any changes to your environment in a safe way.

      This can help you identify any unexpected changes before you deploy them, not after they are already built.
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8443
  difficulty: basic
  timelimit: 600
- slug: tf-variables
  id: 8mqlh6h1x89o
  type: challenge
  title: "\U0001F39B️ Working with Terraform Variables"
  teaser: Terraform variables allow you to customize your infrastructure without editing
    any code. You can use the same terraform code to deploy dev, staging and production
    but with different variables.
  assignment: |-
    We've created a **terraform.tfvars** file for you to edit. This is a special file where you can set any variables you wish to change from their defaults.

    Variables are *defined* in the **variables.tf** file. They are *set* in the **terraform.tfvars** file.

    In terraform all variables must be declared (with or without an optional default value) before you can use them.

    Open the **terraform.tfvars** file and set your prefix variable there. Save the file.

    Now run `terraform plan` again. This time you won't have to enter your prefix manually.
  notes:
  - type: text
    contents: The **terraform.tfvars** file is a convenient place for users to configure
      their variables.
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8443
  difficulty: basic
  timelimit: 600
- slug: tf-add-a-variable
  id: aearucx6ptpd
  type: challenge
  title: "\U0001F5FC Change Your Location"
  teaser: Terraform is flexible enough to deploy infrastructure anywhere in the world.
    You can easily provision your applications in different geographical regions by
    simply changing a single variable.
  assignment: |-
    In one of the previous challenges we set our *prefix* variable.

    Choose the Azure location nearest to you and set the location variable in your **terraform.tfvars** file. You may need to close and re-open the file if it appears blank.
    You can find a list of valid Azure locations here:
    https://azure.microsoft.com/en-us/global-infrastructure/locations/
    Examples:
    centralus - Iowa<br>
    eastus    - Virginia<br>
    westus     - California<br>
    uksouth    - London<br>
    southindia - Chennai<br>
    eastasia   - Hong Kong<br>
    canadacentral - Toronto

    Once you've set your location variable try running `terraform plan` again. What's different this time?

    HINT: Remember that you can set any variable you wish in the **terraform.tfvars** file.
  notes:
  - type: text
    contents: You can override any variable defined in the *variables.tf* file by
      setting it in your personal *terraform.tfvars* file.
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8443
  difficulty: basic
  timelimit: 600
- slug: variables-quiz
  id: wujzqmy0b9jv
  type: quiz
  title: "\U0001F4DD Quiz 2 - Variables"
  teaser: A quiz about Terraform variables
  assignment: |
    Where are Terraform variables *defined*?
  notes:
  - type: text
    contents: |
      Another quiz, get ready!
  answers:
  - On the command line
  - As environment variables
  - In the variables.tf file
  - In the terraform.tfvars file
  solution:
  - 2
  difficulty: basic
  timelimit: 600
- slug: tf-graph
  id: kr9uyrnyk51z
  type: challenge
  title: "\U0001F4C8 Terraform Graph"
  teaser: Terraform creates a graph of all the infrastructure defined in your code.
  assignment: |-
    Start up a Blast Radius server with the following command:

    ```
    blast-radius --serve .
    ```

    Now switch to the **Terraform Graph** tab to view the infrastructure graph.

    Explore the Terraform graph for your infrastructure. Dependencies are automatically mapped out for you. This graph was generated using the free Blast Radius tool.

    You can use your mouse or touchpad to zoom and drag the graph around. Click on different graph nodes to see dependencies more clearly.

    Terraform uses this graph to determine which resources can be built in parallel for maximum efficiency.
  notes:
  - type: text
    contents: Terraform Graph can provide a visual representation of all your infrastructure.
      This is handy for finding dependency issues or resources that will be affected
      by a change.
  tabs:
  - title: Command Line
    type: terminal
    hostname: workstation
  - title: Terraform Graph
    type: service
    hostname: workstation
    port: 5000
  difficulty: basic
  timelimit: 600
- slug: tf-plan-and-apply
  id: eutzht6ysoc7
  type: challenge
  title: "\U0001F468‍\U0001F4BB Terraform Plan and Terraform Apply"
  teaser: The terraform plan command can be run anytime to get a preview of changes
    that terraform might make. When you run terraform apply these changes are implemented,
    and terraform builds, updates, or destroys resources.
  assignment: |-
    Now that we've configured our required variables we can apply our changes.

    Run the *terraform plan* command first to see what will happen:

    ```
    terraform plan
    ```
    Confirm the proper prefix and location are displayed in the plan output.

    Then run *terraform apply* and watch your resource group being built.

    ```
    terraform apply
    ```

    You'll need to enter *yes* when terraform prompts you with the "Do you want to perform these actions?" question.

    Right now our code only defines a single Azure resource group. We'll be building upon this starting point in the next challenge.
  notes:
  - type: text
    contents: Terraform apply includes a terraform plan right before it runs. Terraform
      maps out all the changes it needs to make before applying them.
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8443
  difficulty: basic
  timelimit: 600
- slug: tf-plan-again
  id: ojqjgcggt41x
  type: challenge
  title: "\U0001F469‍\U0001F4BB Test and Repair"
  teaser: Terraform is idempotent. Each resource in your code will be examined, and
    if it already exists Terraform will leave it alone.
  assignment: |-
    Try running **terraform plan** again and see what happens:

    ```
    terraform plan
    ```

    Since your Azure resource group has already been built, terraform will report that there are no changes required.

    This is normal and expected.

    Now try running another apply:

    ```
    terraform apply
    ```

    Terraform checks each resource to ensure it is in the proper state. It will not re-create your resource group if it is already provisioned correctly.
  notes:
  - type: text
    contents: |-
      Terraform is an *idempotent* application.

      Idempotence is the property of certain operations in mathematics and computer science whereby they can be applied multiple times without changing the result beyond the initial application.

      https://en.wikipedia.org/wiki/Idempotence
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8443
  difficulty: basic
  timelimit: 600
- slug: change-location
  id: rc3fsoiiutei
  type: challenge
  title: "\U0001F6EB Change Your Location"
  teaser: When your terraform code changes, your infrastructure will be modified to
    match the updated code. Terraform is a declarative language.
  assignment: |-
    Edit the **terraform.tfvars** file to change your Azure location. You can choose any valid Azure region.

    Examples:<br>
    centralus     - Iowa<br>
    eastus        - Virginia<br>
    westus        - California<br>
    uksouth       - London<br>
    southindia    - Chennai<br>
    eastasia      - Hong Kong<br>
    canadacentral - Toronto<br>

    Save the **terraform.tfvars** file and run your apply command again.

    You can use the `-auto-approve` flag to avoid having to type "yes" every time you apply.

    ```
    terraform apply -auto-approve
    ```

    Observe the output. What happened?
  notes:
  - type: text
    contents: |-
      Terraform can create, destroy, update in place, or destroy and re-create your infrastructure. Some types of resources can be updated without deleting them. Major changes usually require a teardown and rebuild.

      Terraform always tries to match the current infrastructure to what has been defined in your code.
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8443
  difficulty: basic
  timelimit: 600
- slug: add-a-tag
  id: om38efxz74ox
  type: challenge
  title: "\U0001F3F7️ Add a Tag to Your Resource Group"
  teaser: Terraform can change some resources in in place without deleting them. Adding
    tags is a non-destructive action.
  assignment: |-
    Read the terraform documentation for the azurerm_resource_group resource:

    [Azure Terraform Docs - Click Here](https://www.terraform.io/docs/providers/azurerm/r/resource_group.html)

    Add a tag to your resource group in the *main.tf* file.

    The name of the tag should be `environment` and the value should be `Production`. The tag is case-sensitive. Make sure you use a capital P.

    Save the file and re-run `terraform apply`.

    What happens?
  notes:
  - type: text
    contents: Adding, changing, or removing tags is a non-destructive action. Terraform
      can tag your resources without re-creating them.
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8443
  difficulty: basic
  timelimit: 600
- slug: add-virtual-network
  id: akiixqo0aqul
  type: challenge
  title: "\U0001F5A7 Add a Virtual Network"
  teaser: Terraform resources are like building blocks. You can continue adding more
    blocks until your infrastructure reaches the desired state.
  assignment: |-
    Open the *main.tf* file again and uncomment the next resource block in the file. The type of resource is **azurerm_virtual_network** and it is named **vnet**.

    Uncomment the code by removing the `#` characters from the beginning of each line.

    Save the file.

    Now run `terraform apply` again. Observe the results.

    Look at the **location** and **resource_group_name** parameters inside the vnet resource. See how they point back at the first resource in the file? The virtual network resource inherits settings from the resource group.

    Terraform can map out the complex web of dependencies between hundreds of interconnected resources.
  notes:
  - type: text
    contents: Terraform code can be built incrementally, one or two resources at a
      time.
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8443
  difficulty: basic
  timelimit: 600
- slug: complete-the-build
  id: oj7n8otck18m
  type: challenge
  title: "\U0001F3D7️ Complete the Build"
  teaser: Terraform code can stand up everything from resource groups, to virtual
    networks, to VMs and containers.
  assignment: |-
    We've uncommented all the rest of the terraform code in the **main.tf** file for you. Run a `terraform plan` to see what will be built:

    ```
    terraform plan
    ```

    Now run an apply to build the HashiCat application:

    ```
    terraform apply -auto-approve
    ```

    It can take up to five minutes for the application to finish deploying. You will know it is complete when you see the Terraform output with your application URL at the end of the run.

    Open your web application in a new browser tab. You'll need to copy and paste the URL into your address bar.
  notes:
  - type: text
    contents: The -auto-approve flag can be used to override the "Are you sure?" questions
      that appear before an apply or destroy. Use with caution!
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8443
  difficulty: basic
  timelimit: 600
- slug: tf-graph-again
  id: bzvjk3xi7ngf
  type: challenge
  title: "\U0001F4C8 Terraform Graph"
  teaser: Revist graph to see what has changed.
  assignment: |-
    Start up a Blast Radius server with the following command:

    ```
    blast-radius --serve .
    ```

    Now switch to the **Terraform Graph** tab to view the infrastructure graph.

    Explore the Terraform graph for your infrastructure. Dependencies are automatically mapped out for you. This graph was generated using the free Blast Radius tool.

    You can use your mouse or touchpad to zoom and drag the graph around. Click on different graph nodes to see dependencies more clearly.

    Terraform uses this graph to determine which resources can be built in parallel for maximum efficiency.
  notes:
  - type: text
    contents: Let's revisit our graph to see what has changed.
  tabs:
  - title: Command Line
    type: terminal
    hostname: workstation
  - title: Terraform Graph
    type: service
    hostname: workstation
    port: 5000
  difficulty: basic
  timelimit: 600
- slug: terraform-apply-quiz
  id: 7zidogjn1oe9
  type: quiz
  title: "\U0001F4DD Quiz 3 - Terraform Apply"
  teaser: What happens when you run `terraform apply` without a plan file?
  assignment: |
    What happens when you run `terraform apply` without specifying a plan file?
  notes:
  - type: text
    contents: |
      It's quiz time!
  answers:
  - Terraform runs without any plan
  - Terraform reads the previous plan and then applies it
  - Terraform runs a new plan right before the apply
  - None of the above
  solution:
  - 2
  difficulty: basic
  timelimit: 600
- slug: use-a-provisioner
  id: vpozgnompzhd
  type: challenge
  title: "\U0001F6E0️ Use a Provisioner"
  teaser: Terraform works great with many different provisioning tools including Chef,
    Puppet, Ansible, Bash, and Powershell.
  assignment: |-
    Open the `main.tf` file in the Code Editor. Scroll down until you find the `remote-exec` provisioner block, or search the file and find it with CTRL-F.

    Add the following two lines at the end of the inline list of commands:

    ```
    "sudo apt -y install cowsay",
    "cowsay Mooooooooooo!",
    ```

    Now run another *terraform apply* to apply your changes:

    ```
    terraform apply -auto-approve
    ```

    Scroll back through the log output. You should see an ASCII art cow saying "Moooooooo!"
  notes:
  - type: text
    contents: Terraform provisioners run once at creation time. They do not run on
      subsequent applies, except in special circumstances. (Like this training lab...)
  - type: text
    contents: We've made some special adjustments to force the provisioner run every
      time you type terraform apply. This is so you can practice playing with provisioners
      without destroying and recreating your virtual machine every time you make a
      change.
  - type: text
    contents: |-
      ```
      ______________________
      < Cows love Terraform! >
       ----------------------
               \   ^__^
                \  (oo)\_______
                   (__)\       )\/\
                       ||----w |
                       ||     ||
      =============================
      ```
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8443
  difficulty: basic
  timelimit: 600
- slug: add-an-output
  id: uynaqtnhxe3m
  type: challenge
  title: "\U0001F5A8️ Add an Output"
  teaser: Outputs are used to convey useful information such as IP addresses, application
    URLs or other useful data.
  assignment: |-
    Open the **outputs.tf** file in the Code Editor.

    Add a second output for the `ip_address` of your web server.

    Name your output `catapp_ip`.

    You may refer to the docs page to see what types of outputs are valid:

    [Terraform Azure Docs - Click Here](https://www.terraform.io/docs/providers/azurerm/r/public_ip.html)
    [Terraform Outputs Docs - Click Here] (https://www.terraform.io/docs/configuration/outputs.html)

    Run the terraform refresh command to view your new output:

    ```
    terraform refresh
    ```

    You can run the terraform output command to view all your outputs:

    ```
    terraform output
    ```
  notes:
  - type: text
    contents: You can mix plain text along with Terraform data in your outputs. Outputs
      can be used to convey useful information to your users at the end of a run.
  - type: text
    contents: The `terraform refresh` command will sync your state file with what
      exists in your infrastructure. A refresh command will not change your infrastructure.
  - type: text
    contents: The `terraform output` command can be run any time you want to see your
      Terraform outputs again. Run `terraform output <output_name>` to view a single
      output.
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8443
  difficulty: basic
  timelimit: 600
- slug: fun-with-variables
  id: 1pi0cgooxmlp
  type: challenge
  title: "\U0001F436 Fun With Variables"
  teaser: Variables give the consumers of your terraform code an easy way to customize
    their infrastructure.
  assignment: |-
    There are several ways to configure Terraform variables. So far we've been using the **terraform.tfvars** file to set our variables. Try re-deploying your application with different **height** and **width** variables on the command line. Reload the webapp after each apply to observe any changes.

    ```
    terraform apply -auto-approve -var height=600 -var width=800
    ```

    Next try setting an environment variable that Terraform can read. Run this command to set the placeholder variable:

    ```
    export TF_VAR_placeholder=placedog.net
    ```

    Run another *terraform apply* command:
    ```
    terraform apply -auto-approve
    ```

    Now try it again with the same variable set differently on the command line:
    ```
    terraform apply -auto-approve -var placeholder=placebear.com
    ```

    Which variable took precedence? Why?
  notes:
  - type: text
    contents: |-
      Terraform variables have five levels of precedence. 1=highest 5=lowest:

      1. Command line flag - run as a command line switch
      1. Configuration file - set in your terraform.tfvars file
      1. Environment variable - part of your shell environment
      1. Default Config - default value in variables.tf
      1. User manual entry - if not specified, prompt the user for entry
  - type: text
    contents: |-
      Here are some other fun placeholder sites you can try with the *placeholder* variable:

      placedog.net<br>
      placebear.com<br>
      www.fillmurray.com<br>
      www.placecage.com<br>
      placebeard.it<br>
      loremflickr.com<br>
      baconmockup.com<br>
      placeimg.com<br>
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8443
  difficulty: basic
  timelimit: 600
- slug: terraform-variables-quiz
  id: f92cyaayt2ya
  type: quiz
  title: "\U0001F4DD Quiz 4 - Terraform Variables"
  teaser: How do terraform variables get set or overridden?
  assignment: |
    You have the same variable set in a *.tfvars file and as an environment variable. Which one takes precedence?
  notes:
  - type: text
    contents: |
      Get ready for another quiz...
  answers:
  - The environment variable
  - The tfvars config file
  - The default value in variables.tf
  - None of the above
  solution:
  - 1
  difficulty: basic
  timelimit: 600
- slug: terraform-cloud-setup
  id: inwqabkqorsd
  type: challenge
  title: ☁️ Terraform Cloud Setup
  teaser: Terraform Cloud offers unlimited free terraform state storage for users.
    Safeguard your state files by storing them remotely in Terraform Cloud.
  assignment: |-
    Sign up for a free Terraform Cloud account at the following URL:

    https://app.terraform.io/signup/account

    If you already have an account you can simply sign in with your existing credentials.

    Once you're signed into Terraform Cloud create a new organization called YOURNAME-sandbox. Replace YOURNAME with your own name or other text.

    Next you'll be prompted to create a workspace. You can skip the VCS integration step by clicking the "No VCS Connection" button. Name your workspace **hashicat**.

    Now go into the workspace's **Settings >> General** settings page and change the Execution Mode to local.  Be sure to save your settings! This will allow us to run terraform commands from our workstation with local variables.
  notes:
  - type: text
    contents: Terraform Cloud remote state storage is free for all users.
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8443
  difficulty: basic
  timelimit: 600
- slug: configure-remote-state
  id: azzf4lxdgwta
  type: challenge
  title: "\U0001F39B️ Configure Remote State"
  teaser: The terraform command line tool can store its state in Terraform Cloud.
    All that is required is a user token.
  assignment: |-
    In the Terraform Cloud web UI, go into your Terraform Cloud User Settings by clicking the icon in the upper right corner. Under User Settings click on Tokens. Generate a new token for your workstation. You can call it **workshop-token**.

    Open the `/root/.terraformrc` file with the "File > Open File" menu command. Replace where it says YOURTOKENHERE with the user token you just created. Save and close the file.

    Edit the `remote_backend.tf` file. Replace the organization with your sandbox organization name. Replace the workspace name with **hashicat**. Save the file.

    Now run a *terraform init* to migrate your state to Terraform Cloud:

    ```
    terraform init
    ```

    Type "yes" when it prompts you to migrate your state into Terraform Cloud.

    Your state is now safely stored in Terraform Cloud.

    Run another `terraform apply` and watch your state file evolve with each change. You can browse through previous state files with the Terraform Cloud UI.
  notes:
  - type: text
    contents: |-
      With *local* execution mode the terraform commands and variables all remain
      on your workstation.

      With *remote* execution mode terraform runs in a Terraform Cloud
      container environment. All variables must be configured in the cloud environment with this method.
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8443
  difficulty: basic
  timelimit: 600
- slug: terraform-destroy
  id: vzdrbjbglp0w
  type: challenge
  title: "\U0001F525 Terraform Destroy"
  teaser: Terraform can build infrastructure and also destroy it when you are done
    using it. This helps control costs and reduce infrastructure sprawl.
  assignment: |-
    Run the following command to destroy your infrastructure:

    ```
    terraform destroy
    ```

    You'll need to type "yes" when prompted to destroy your infrastructure. This is a safety feature to help prevent accidental deletion of important resources.

    Wait until the destroy action has completely finished before clicking on the *Check* button.
  notes:
  - type: text
    contents: Terraform can destroy infrastructure as easily as it can build it. Use
      terraform with caution.
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8443
  difficulty: basic
  timelimit: 600
checksum: "1486092464173111158"
