slug: terraform-build-azure
id: bvlt94x5i8gc
type: track
title: Provision to Azure with Terraform
teaser: Provision the HashiCat application on Azure using Terraform.
description: "In this track you'll practice provisioning infrastructure in Azure.\n\nWe'll
  begin by deploying a resource group, then adding a network and gradually building
  the entire application stack.\n\nWhen you're finished you'll be able to view the
  HashiCat application in your web browser.\n\nKittens as a Service! \U0001F63A"
icon: https://storage.googleapis.com/instruqt-hashicorp-tracks/logo/terraform.png
tags:
- terraform
- azure
- basics
owner: hashicorp
developers:
- scarolan@hashicorp.com
private: true
published: true
challenges:
- slug: setup-our-environment
  id: ybj0pfuzxigx
  type: challenge
  title: Moving in - Set Up Your Workspace
  teaser: Configure your code editor with the HCL extension and open a workspace.
  assignment: |-
    Open the Code Editor tab on the left.

    Select "File > Open Folder".

    Open the `hashicat-azure` directory in the Code Editor.

    This is your terraform workspace.

    Now click on the box-shaped icon on the left side menu. This opens the Extensions sidebar.

    Search for *hcl*. Install the first extension on the list. It is named `HCL`.

    Click on the blue **Reload Required** button to refresh the editor.

    Now click on the explorer icon on the left side menu. It looks like a stack of documents.

    Congratulations, you've configured your environment to work with Terraform!
  notes:
  - type: text
    contents: The terraform language is designed to be both human and machine-readable.
  - type: text
    contents: Most modern text editors support Terraform syntax highlighting.
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8080
  difficulty: basic
  timelimit: 600
- slug: open-a-terminal
  id: 5xarxf5nkudh
  type: challenge
  title: Open a Terminal
  teaser: Terraform commands are run from a terminal window. Terraform can be installed
    on Linux, Windows, or MacOS.
  assignment: |-
    Open a new Terminal window. You can use the "Terminal > New Terminal" menu item or the keyboard shortcut **CTRL-J**.

    All terraform commands should be run from the terminal in Visual Studio Code.

    Try the **CTRL-J** shortcut to toggle the terminal window open and closed.

    Run `terraform version` to verify that Terraform is installed and working.
  notes:
  - type: text
    contents: The terraform command line tool is available for MacOS, FreeBSD, OpenBSD,
      Windows, Solaris and Linux.
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8080
  difficulty: basic
  timelimit: 600
- slug: examine-main-tf
  id: nisroc5tsz4h
  type: challenge
  title: Examine the main.tf file
  teaser: Terraform code is a declarative language that allows you to build almost
    any kind of infrastructure. Let's look at the code from our sample application.
  assignment: |-
    Open the main.tf file in the Code Editor.

    You'll notice that most of the file is commented out with `#` symbols. At the top of the file there's a single terraform resource which builds an Azure Resource group.

    Note the two variables that must be configured for this resource to work. We'll set those in the next challenge.

    Click the *Check* button to continue.
  notes:
  - type: text
    contents: Terraform code files always end with `.tf` or `.tfvars` extensions.
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8080
  difficulty: basic
  timelimit: 600
- slug: tf-add-a-variable
  id: jhgtd1ygijts
  type: challenge
  title: Configure Terraform Variables
  teaser: Terraform is flexible enough to deploy infrastructure anywhere in the world.
    You can easily provision your applications in different geographical regions by
    simply changing a single variable.
  assignment: |-
    In this challenge we'll set the *prefix* and *location* variables. The prefix will become part of your application's URL, and the location determines which Azure datacenter our app will be deployed into.

    Choose the Azure location nearest to you.

    Examples:<br/>
    centralus     - Iowa<br/>
    eastus        - Virginia<br/>
    westus        - California<br/>
    uksouth       - London<br/>
    southindia    - Chennai<br/>
    eastasia      - Hong Kong<br/>
    canadacentral - Toronto<br/>

    Edit the *terraform.tfvars* file to set your *location* and *prefix* variables.

    Keep your prefix string all lower case, and between 5-12 characters long.

    Save the terraform.tfvars file.
  notes:
  - type: text
    contents: You can override any variable defined in the *variables.tf* file by
      setting it in your *terraform.tfvars* file.
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8080
  difficulty: basic
  timelimit: 600
- slug: tf-plan-and-apply
  id: xgmrp6woe3up
  type: challenge
  title: Terraform Plan and Terraform Apply
  teaser: The terraform plan command can be run anytime to get a preview of changes
    that terraform might make. When you run terraform apply these changes are implemented,
    and terraform builds, updates, or destroys resources.
  assignment: |-
    Now that we've configured our required variables we can apply our changes.

    Run the *terraform plan* command first to see what will happen:

    ```
    terraform plan
    ```

    Then run *terraform apply* and watch your resource group being built.

    ```
    terraform apply
    ```

    You'll need to enter *yes* when terraform prompts you with the "Do you want to perform these actions?" question.

    Right now our code only defines a single Azure resource group. We'll be building upon this starting point in the next challenge.
  notes:
  - type: text
    contents: Terraform apply includes a terraform plan right before it runs. Terraform
      maps out all the changes it needs to make before applying them.
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8080
  difficulty: basic
  timelimit: 600
- slug: tf-plan-again
  id: 7uywvtmk4ogw
  type: challenge
  title: Test and Repair
  teaser: Terraform is idempotent. Each resource in your code will be examined, and
    if it already exists Terraform will leave it alone.
  assignment: |-
    Try running **terraform plan** again and see what happens:

    ```
    terraform plan
    ```

    Since your Azure resource group has already been built, terraform will report that there are no changes required.

    This is normal and expected.
  notes:
  - type: text
    contents: |-
      Terraform is an *idempotent* application.

      Idempotence is the property of certain operations in mathematics and computer science whereby they can be applied multiple times without changing the result beyond the initial application.

      https://en.wikipedia.org/wiki/Idempotence
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8080
  difficulty: basic
  timelimit: 600
- slug: change-location
  id: stlwwlwfd6tn
  type: challenge
  title: Change Your Location
  teaser: When your terraform code changes, your infrastructure will be modified to
    match the updated code. Terraform is a declarative language.
  assignment: |-
    Edit the **terraform.tfvars** file to change your Azure location. You can choose any valid Azure region.

    Examples:<br/>
    centralus     - Iowa<br/>
    eastus        - Virginia<br/>
    westus        - California<br/>
    uksouth       - London<br/>
    southindia    - Chennai<br/>
    eastasia      - Hong Kong<br/>
    canadacentral - Toronto<br/>

    Save the **terraform.tfvars** file and run your apply command again.

    You can use the `-auto-approve` flag to avoid having to type "yes" every time you apply.

    ```
    terraform apply -auto-approve
    ```

    Observe the output. What happened?
  notes:
  - type: text
    contents: |-
      Terraform can create, destroy, update in place, or destroy and re-create your infrastructure. Some types of resources can be updated without deleting them. Major changes usually require a teardown and rebuild.

      Terraform always tries to match the current infrastructure to what has been defined in your code.
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8080
  difficulty: basic
  timelimit: 600
- slug: add-a-tag
  id: 4rorshedxlta
  type: challenge
  title: Add a Tag to Your Resource Group
  teaser: Terraform can change some resources in in place without deleting them. Adding
    tags is a non-destructive action.
  assignment: |-
    Read the terraform documentation for the azurerm_resource_group resource:

    [Azure Terraform Docs - Click Here](https://www.terraform.io/docs/providers/azurerm/r/resource_group.html)

    Add a tag to your resource group in the *main.tf* file.

    The name of the tag should be `environment` and the value should be `Production`.

    Save the file and re-run `terraform apply`.

    What happens?
  notes:
  - type: text
    contents: Adding, changing, or removing tags is a non-destructive action. Terraform
      can tag your resources without re-creating them.
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8080
  difficulty: basic
  timelimit: 600
- slug: add-virtual-network
  id: 18lcsj2vyhpz
  type: challenge
  title: Add a Virtual Network
  teaser: Terraform resources are like building blocks. You can continue adding more
    blocks until your infrastructure reaches the desired state.
  assignment: |-
    Open the *main.tf* file again and uncomment the next resource block in the file. The type of resource is **azurerm_virtual_network** and it is named **vnet**.

    Uncomment the code by removing the `#` characters from the beginning of each line.

    Save the file.

    Now run `terraform apply` again. Observe the results.
  notes:
  - type: text
    contents: Terraform code can be built incrementally, one or two resources at a
      time.
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8080
  difficulty: basic
  timelimit: 600
- slug: complete-the-build
  id: tb8t1yp7qjyo
  type: challenge
  title: Complete the Build
  teaser: Terraform code can stand up everything from resource groups, to virtual
    networks, to VMs and containers.
  assignment: |-
    We've uncommented all the rest of the terraform code in the **main.tf** file for you. Run a `terraform plan` to see what will be built:

    ```
    terraform plan
    ```

    Now run an apply to build the HashiCat application:

    ```
    terraform apply -auto-approve
    ```

    It can take up to five minutes for the application to finish deploying. You will know it is complete when you see the Terraform output with your application URL at the end of the run.

    Open your web application in a new browser tab. You'll need to copy and paste the URL into your address bar.
  notes:
  - type: text
    contents: The -auto-approve flag can be used to override the "Are you sure?" questions
      that appear before an apply or destroy. Use with caution!
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8080
  difficulty: basic
  timelimit: 600
- slug: tf-graph
  id: fgkcnkqwypsr
  type: challenge
  title: Terraform Graph
  teaser: Terraform creates a graph of all the infrastructure defined in your code.
  assignment: |-
    Start up a Blast Radius server with the following command:

    ```
    blast-radius --serve .
    ```

    Now switch to the **Terraform Graph** tab to view the infrastructure graph.

    Explore the Terraform graph for your infrastructure. Dependencies are automatically mapped out for you. This graph was generated using the free Blast Radius tool.

    You can use your mouse or touchpad to zoom and drag the graph around. Click on different graph nodes to see dependencies more clearly.

    Terraform uses this graph to determine which resources can be built in parallel for maximum efficiency.
  notes:
  - type: text
    contents: Terraform Graph can provide a visual representation of all your infrastructure.
      This can be handy for finding dependency issues or resources that will be affected
      by a change.
  tabs:
  - title: Command Line
    type: terminal
    hostname: workstation
  - title: Terraform Graph
    type: service
    hostname: workstation
    port: 5000
  difficulty: basic
  timelimit: 600
- slug: use-a-provisioner
  id: cnhiy7l5eagm
  type: challenge
  title: Use a Provisioner
  teaser: Terraform works great with many different provisioning tools including Chef,
    Puppet, Ansible, Bash, and Powershell.
  assignment: |-
    Open the `main.tf` file in the Code Editor. Scroll down to line 157 where you will see the remote-exec provisioner block.

    Add the following at the end of the inline list of commands:

    ```
    "sudo apt -y install cowsay",
    "cowsay Mooooooooooo!",
    ```

    Now run another *terraform apply* to apply your changes:

    ```
    terraform apply -auto-approve
    ```

    Scroll back through the log output. You should see an ASCII art cow that is saying "Moooooooo!"
  notes:
  - type: text
    contents: Terraform provisioners run once at creation time. They do not run on
      subsequent applies, except in special circumstances. (Like this training lab...)
  - type: text
    contents: We've made some special adjustments to force the provisioner run every
      time you type terraform apply. This is so you can practice playing with provisioners
      without destroying and recreating your virtual machine every time you make a
      change.
  - type: text
    contents: |-
      ```
      ______________________
      < Cows love Terraform! >
       ----------------------
               \   ^__^
                \  (oo)\_______
                   (__)\       )\/\
                       ||----w |
                       ||     ||
      =============================
      ```
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8080
  difficulty: basic
  timelimit: 600
- slug: add-an-output
  id: fynppt1whity
  type: challenge
  title: Add an Output
  teaser: Outputs are used to convey useful information such as IP addresses, application
    URLs or other useful data.
  assignment: |-
    Open the **outputs.tf** file in the Code Editor.

    Add a second output for the `ip_address` of your web server.

    Name your output `catapp_ip`.

    You may refer to the docs page to see what types of outputs are valid:

    [Terraform Azure Docs - Click Here](https://www.terraform.io/docs/providers/azurerm/r/public_ip.html)

    Run the terraform refresh command to view your new output:

    ```
    terraform refresh
    ```

    You can run the terraform output command to view all your outputs:

    ```
    terraform output
    ```
  notes:
  - type: text
    contents: You can mix plain text along with Terraform data in your outputs. Outputs
      can be used to convey useful information to your users at the end of a run.
  - type: text
    contents: The `terraform refresh` command will sync your state file with what
      exists in your infrastructure. A refresh command will not change your infrastructure.
  - type: text
    contents: The `terraform output` command can be run any time you want to see your
      Terraform outputs again. Run `terraform output <output_name>` to view a single
      output.
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8080
  difficulty: basic
  timelimit: 600
- slug: fun-with-variables
  id: xhrtgnqx2nod
  type: challenge
  title: Fun With Variables
  teaser: Variables give the consumers of your terraform code an easy way to customize
    their infrastructure.
  assignment: |-
    There are several ways to configure Terraform variables. So far we've been using the **terraform.tfvars** file to set our variables. Try re-deploying your application with a different **height** and **width** variables on the command line. Reload the webapp after each apply to observe any changes.

    ```
    terraform apply -auto-approve -var height=600 -var width=800
    ```

    Next try setting an environment variable that Terraform can read. Run this command to set the placeholder variable:

    ```
    export TF_VAR_placeholder=placedog.net
    ```

    Run another *terraform apply* command:
    ```
    terraform apply -auto-approve
    ```

    Now try it again with the same variable set differently on the command line:
    ```
    terraform apply -auto-approve -var placeholder=placebear.com
    ```

    Which variable took precedence? Why?
  notes:
  - type: text
    contents: |-
      Terraform variables have five levels of precedence. 1=highest 5=lowest:

      1. Command line flag
      1. Configuration file
      1. Environment variable
      1. Default Config
      1. User manual entry
  - type: text
    contents: |-
      Here are some other fun placeholder sites you can try with the *placeholder* variable:

      placedog.net<br/>
      placebear.com<br/>
      www.fillmurray.com<br/>
      www.placecage.com<br/>
      placebeard.it<br/>
      loremflickr.com<br/>
      baconmockup.com<br/>
      placeimg.com<br/>
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8080
  difficulty: basic
  timelimit: 600
- slug: terraform-cloud-setup
  id: 6qzffd0tp15f
  type: challenge
  title: Terraform Cloud Setup
  teaser: Terraform Cloud offers unlimited free terraform state storage for users.
    Safeguard your state files by storing them remotely in Terraform Cloud.
  assignment: |-
    Sign up for a free Terraform Cloud account at the following URL:

    https://app.terraform.io/signup/account

    If you already have an account you can simply sign in with your existing credentials.

    Once you're signed into Terraform Cloud create a new organization called YOURNAME-sandbox. Replace YOURNAME with your own name or other text.

    Next you'll be prompted to create a workspace. You can skip the VCS integration step by clicking the "No VCS Connection" button. Name your workspace **hashicat**.

    Now go into the workspace's **Settings >> General** settings page and change the Execution Mode to local. This will allow us to run terraform commands from our workstation with local variables.
  notes:
  - type: text
    contents: Terraform Cloud remote state storage is free for all users.
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8080
  difficulty: basic
  timelimit: 600
- slug: configure-remote-state
  id: s3ktaoaj9jf0
  type: challenge
  title: Configure Remote State
  teaser: The terraform command line tool can store its state in Terraform Cloud.
    All that is required is a user token.
  assignment: |-
    Go into your Terraform Cloud User Settings by clicking the icon in the upper right corner. Under User Settings click on Tokens. Generate a new token for your workstation. You can call it **workshop-token**.

    Open the `/root/.terraformrc` file with the "File > Open File" menu command. Replace where it says YOURTOKENHERE with the user token you just created. Save and close the file.

    Edit the remote_backend.tf file. Replace the organization with your sandbox organization name. Replace the workspace name with **hashicat**. Save the file.

    Now run a *terraform init* to migrate your state to Terraform Cloud:

    ```
    terraform init
    ```

    Type "yes" when it prompts you to migrate your state into Terraform Cloud.

    Your state is now safely stored in Terraform Cloud.

    Run another `terraform apply` and watch your state file evolve with each change. You can browse through previous state files with the Terraform Cloud UI.
  notes:
  - type: text
    contents: With *remote state* the terraform commands and variables all remain
      on your workstation. With *remote execution* terraform runs in a Terraform Cloud
      container environment. All variables must be configured in the cloud environment
      with this method.
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8080
  difficulty: basic
  timelimit: 600
- slug: terraform-destroy
  id: sliv4sehcy5r
  type: challenge
  title: Terraform Destroy
  teaser: Terraform can build infrastructure and also destroy it when you are done
    using it. This helps control costs and reduce infrastructure sprawl.
  assignment: |-
    Run the following command to destroy your infrastructure:

    ```
    terraform destroy
    ```

    You'll need to type "yes" when prompted to destroy your infrastructure. This is a safety feature to help prevent accidental deletion of important resources.

    Wait until the destroy action has completely finished before clicking on the *Check* button.
  notes:
  - type: text
    contents: Terraform can destroy infrastructure as easily as it can build it. Use
      terraform with caution.
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8080
  difficulty: basic
  timelimit: 600
checksum: "11412897605310501848"
