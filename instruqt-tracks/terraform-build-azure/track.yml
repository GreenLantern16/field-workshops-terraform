slug: terraform-build-azure
id: bvlt94x5i8gc
type: track
title: Provision to Azure with Terraform
teaser: Provision the HashiCat application on Azure using Terraform.
description: "In this track you'll practice provisioning infrastructure in Azure.\n\nWe'll
  begin by deploying a resource group, then adding a network and gradually building
  the entire application stack.\n\nWhen you're finished you'll be able to view the
  HashiCat application in your web browser.\n\nKittens as a Service! \U0001F63A"
icon: https://storage.googleapis.com/instruqt-hashicorp-tracks/logo/terraform.png
tags:
- terraform
- azure
- basics
owner: hashicorp
developers:
- scarolan@hashicorp.com
private: true
published: true
challenges:
- slug: setup-our-environment
  id: hyrkyyn0w8en
  type: challenge
  title: Moving in - Set Up Your Workspace
  teaser: Configure your code editor with the Terraform extension and open a workspace.
  assignment: |-
    Open the Code Editor tab on the left.

    Select "File > Open Folder".

    Open the `hashicat-azure` directory in the Code Editor.

    This is your terraform workspace.

    Now click on the box-shaped icon on the left side menu. This opens the Extensions sidebar.

    Search for *terraform*. Install the first extension on the list. It is named `Terraform`.

    Click on the blue **Reload Required** button to refresh the editor.

    Now click on the explorer icon on the left side menu. It looks like a stack of documents.

    Congratulations, you installed the Terraform extension in Visual Studio Code.

    NOTE - you may ignore the error message about the mauve.terraform extension. This is a known bug.
  notes:
  - type: text
    contents: The terraform language is designed to be both human and machine-readable.
  - type: text
    contents: Most modern text editors support Terraform syntax highlighting.
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8080
  difficulty: basic
  timelimit: 600
- slug: examine-main-tf
  id: nisroc5tsz4h
  type: challenge
  title: Examine the main.tf file
  teaser: Terraform code is a declarative language that allows you to build almost
    any kind of infrastructure. Let's look at the code from our sample application.
  assignment: |-
    Open the main.tf file in the Code Editor.

    You'll notice that most of the file is commented out with `#` symbols. At the top of the file there's a single terraform resource which builds an Azure Resource group.

    Note the two variables that must be configured for this resource to work. We'll set those in the next challenge.
  notes:
  - type: text
    contents: Terraform code files always end with `.tf` or `.tfvars` extensions.
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8080
  difficulty: basic
  timelimit: 600
- slug: tf-add-a-variable
  id: jhgtd1ygijts
  type: challenge
  title: Configure Terraform Variables
  teaser: Terraform is flexible enough to deploy infrastructure anywhere in the world.
    You can easily provision your applications in different geographical regions by
    simply changing a single variable.
  assignment: |-
    In this challenge we'll set the *prefix* and *location* variables. The prefix will become part of your application's URL, and the location determines which Azure datacenter our app will be deployed into.

    Choose the Azure location nearest to you.

    Examples:

    centralus     - Iowa<br/>
    eastus        - Virginia<br/>
    westus        - California<br/>
    uksouth       - London<br/>
    southindia    - Chennai<br/>
    eastasia      - Hong Kong<br/>
    canadacentral - Toronto<br/>

    Edit the *terraform.tfvars* file to set your *location* and *prefix* variables.

    Keep your prefix string all lower case, and between 5-12 characters long.

    Save the terraform.tfvars file.
  notes:
  - type: text
    contents: You can override any variable defined in the *variables.tf* file by
      setting it in your personal *terraform.tfvars* file. Let's deploy our HashiCat
      application in the Azure location nearest to you.
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8080
  difficulty: basic
  timelimit: 600
- slug: tf-plan-and-apply
  id: xgmrp6woe3up
  type: challenge
  title: Terraform Plan and Terraform Apply
  teaser: The terraform plan command can be run anytime to get a preview of changes
    that terraform might make. When you run terraform apply these changes are implemented,
    and terraform builds, updates, or destroys resources.
  assignment: |-
    Now that we've configured our required variables we can apply our changes.

    Run the *terraform plan* command first to see what will happen:

    ```
    terraform plan
    ```

    Then go ahead and run *terraform apply* and watch your resource group being built.

    ```
    terraform apply
    ```

    You'll need to enter *yes* when terraform prompts you with the "Do you want to perform these actions?" question.

    Right now our code only defines a single Azure resource group. We'll be building upon this starting point in the next challenge.
  notes:
  - type: text
    contents: Terraform apply includes a terraform plan right before it runs. Terraform
      maps out all the changes it needs to make before actually applying them.
  tabs:
  - title: Terraform CLI
    type: terminal
    hostname: workstation
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8080
  difficulty: basic
  timelimit: 600
- slug: tf-plan-again
  id: 7uywvtmk4ogw
  type: challenge
  title: Test and Repair
  teaser: Terraform is idempotent. Each resource in your code will be examined, and
    if it already exists Terraform will leave it alone.
  assignment: |-
    Try running **terraform plan** again and see what happens:

    ```
    terraform plan
    ```

    Since your Azure resource group has already been built, terraform will report that there are no changes required.

    This is normal and expected.
  notes:
  - type: text
    contents: |-
      Terraform is an *idempotent* application.

      Idempotence is the property of certain operations in mathematics and computer science whereby they can be applied multiple times without changing the result beyond the initial application.

      https://en.wikipedia.org/wiki/Idempotence
  tabs:
  - title: Terraform CLI
    type: terminal
    hostname: workstation
  difficulty: basic
  timelimit: 600
- slug: change-location
  id: stlwwlwfd6tn
  type: challenge
  title: Change Your Location
  teaser: When your terraform code changes, your infrastructure will be modified to
    match the updated code. Terraform is a declarative language.
  assignment: |-
    Use the *Code Editor* tab to update your Azure location. You can choose any valid Azure region. Here are some examples:

    centralus     - Iowa<br/>
    eastus        - Virginia<br/>
    westus        - California<br/>
    uksouth       - London<br/>
    southindia    - Chennai<br/>
    eastasia      - Hong Kong<br/>
    canadacentral - Toronto<br/>

    Save the terraform.tfvars file and run your apply command again.

    You can use the `-auto-approve` flag to avoid having to type "yes" every time you apply.

    ```
    terraform apply -auto-approve
    ```

    Observe the output. What happened?
  notes:
  - type: text
    contents: |-
      Terraform can create, destroy, update in place, or destroy and re-create your infrastructure. Some types of resources can be updated without deleting them. Major changes usually require a teardown and rebuild.

      Terraform always tries to match the current infrastructure to what has been defined in your code.
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8080
  - title: Terraform CLI
    type: terminal
    hostname: workstation
  difficulty: basic
  timelimit: 600
- slug: add-a-tag
  id: 4rorshedxlta
  type: challenge
  title: Add a Tag to Your Resource Group
  teaser: Terraform can change some resources in in place without deleting them. Adding
    tags is a non-destructive action.
  assignment: |-
    Read the terraform documentation for the azurerm_resource_group resource:

    [AzureRM Terraform Docs - Click Here](https://www.terraform.io/docs/providers/azurerm/r/resource_group.html)

    Add a tag to your resource group in the *main.tf* file.

    The name of the tag should be `environment` and the value should be `Production`.

    Save the file and re-run `terraform apply`.

    What happens?
  notes:
  - type: text
    contents: Adding, changing, or removing tags is a non-destructive action. Terraform
      can tag your resources without re-creating them.
  tabs:
  - title: Terraform CLI
    type: terminal
    hostname: workstation
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8080
  difficulty: basic
  timelimit: 600
- slug: add-virtual-network
  id: 18lcsj2vyhpz
  type: challenge
  title: Add a Virtual Network
  teaser: Terraform resources are like building blocks. You can continue adding more
    blocks until your infrastructure reaches the desired state.
  assignment: |-
    Open the *main.tf* file again and uncomment the next resource block in the file. The type of resource is **azurerm_virtual_network** and it is named **vnet**.

    You can do this quickly by highlighting the block of code with your mouse. Then use the keyboard shortcut `CTRL-/`. That will toggle the comments off.

    Save the file.

    Now run `terraform apply` again. Observe the results.
  notes:
  - type: text
    contents: Terraform code can be built incrementally, one or two resources at a
      time.
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8080
  - title: Terraform CLI
    type: terminal
    hostname: workstation
  difficulty: basic
  timelimit: 600
- slug: complete-the-build
  id: tb8t1yp7qjyo
  type: challenge
  title: Complete the Build
  teaser: Terraform code can stand up everything from resource groups, to virtual
    networks, to VMs and containers.
  assignment: |-
    We've uncommented all the rest of the terraform code in the main.tf for you. Run a `terraform plan` to see what will be built:

    ```
    terraform plan
    ```

    Now run an apply to build the HashiCat application:

    ```
    terraform apply -auto-approve
    ```

    It can take four to five minutes for the application to finish deploying. You will know it is complete when you see the Terraform output with your application URL at the end of the run.

    Open your web application in a new browser tab. You'll need to copy and paste the URL into your address bar.
  notes:
  - type: text
    contents: The -auto-approve flag can be used to override the "Are you sure?" questions
      that appear before an apply or destroy. Use with caution!
  tabs:
  - title: Terraform CLI
    type: terminal
    hostname: workstation
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8080
  difficulty: basic
  timelimit: 600
- slug: tf-graph
  id: fgkcnkqwypsr
  type: challenge
  title: Terraform Graph - What Did We Build?
  teaser: Terraform creates a graph of all the infrastructure defined in your code.
    Let's visualize the graph and see what your infrastructure map looks like.
  assignment: |-
    The **terraform graph** command can generate a DOT-formatted graph of your infrastructure. DOT is a graph description language. DOT files can be used with visualization tools like Graphviz.

    Run the terraform graph command now to see the raw output:

    ```
    terraform graph
    ```

    Now let's plot this raw data using the free Blast Radius visualizer. We've pre-installed blast-radius for you. Run the following command then open the **Terraform Graph** tab to see the results:

    ```
    blast-radius --serve .
    ```

    You can use your mouse to click and drag the graph around. You can click on different graph nodes to see dependencies more clearly.
  notes:
  - type: text
    contents: Terraform Graph can give you a visual representation of all your infrastructure.
  tabs:
  - title: Terraform CLI
    type: terminal
    hostname: workstation
  - title: Terraform Graph
    type: service
    hostname: workstation
    port: 5000
  difficulty: basic
  timelimit: 600
- slug: use-a-provisioner
  id: cnhiy7l5eagm
  type: challenge
  title: Use a Provisioner
  teaser: Terraform works great with many different provisioning tools including Chef,
    Puppet, Ansible, Bash, and Powershell.
  assignment: |-
    Open the `main.tf` file in the Code Editor. Scroll down to line 157 where you will see the remote-exec provisioner block.

    Add the following at the end of the inline list of commands:

    ```
    "sudo apt -y install cowsay",
    "cowsay Mooooooooooo!",
    ```

    Now run another `terraform apply` to apply your changes:

    ```
    terraform apply -auto-approve
    ```

    Scroll back through the log output. You should see an ASCII art cow that is saying "Moooooooo!"
  notes:
  - type: text
    contents: Terraform provisioners run once at creation time. They do not run on
      subsequent applies, except in special circumstances. (Like this training lab...)
  - type: text
    contents: We've made some special adjustments to force the provisioner run every
      time you type terraform apply. This is so you can practice playing with provisioners
      without destroying and recreating your virtual machine every time you make a
      change.
  - type: text
    contents: |-
      ```
      ______________________
      < Cows love Terraform! >
       ----------------------
               \   ^__^
                \  (oo)\_______
                   (__)\       )\/\
                       ||----w |
                       ||     ||
      =============================
      ```
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8080
  - title: Terraform CLI
    type: terminal
    hostname: workstation
  difficulty: basic
  timelimit: 600
- slug: terraform-destroy
  id: sliv4sehcy5r
  type: challenge
  title: Terraform Destroy
  teaser: Terraform can build infrastructure and also destroy it when you are done
    using it. This helps control costs and reduce infrastructure sprawl.
  assignment: |-
    Run the following command to destroy your infrastructure:

    ```
    terraform destroy
    ```

    You'll need to type "yes" when prompted to destroy your infrastructure. This is a safety feature to help prevent accidental deletion of important resources.

    Wait until the destroy action has completely finished before clicking on the *Check* button.
  notes:
  - type: text
    contents: Terraform can destroy infrastructure as easily as it can build it. Use
      terraform with caution.
  tabs:
  - title: Terraform CLI
    type: terminal
    hostname: workstation
  difficulty: basic
  timelimit: 600
checksum: "7374979993843894106"
