slug: terraform-basics-azure
id: m83tcer7vgjm
type: track
title: Terraform Basics on Azure
teaser: Learn how to setup and run some basic Terraform commands with Azure.
description: |-
  Terraform is the world's most popular open source provisioning tool. Thousands of users build millions of containers, virtual machines, and other infrastructure with Terraform every single day. Terraform is easy to learn and fun to work with.

  We invite you to join the ranks of the Terraform community today!

  This track will introduce you to Terraform open source on Microsoft Azure. You'll learn  terraform setup, basic commands and integration with Microsoft Azure.
icon: https://storage.googleapis.com/instruqt-hashicorp-tracks/logo/terraform.png
tags:
- terraform
- azure
- basics
owner: hashicorp
developers:
- scarolan@hashicorp.com
private: true
published: true
challenges:
- slug: hello-terraform
  id: pbc0sybscvko
  type: challenge
  title: Getting to Know Terraform
  teaser: Learn terraform basics and command line syntax.
  assignment: |-
    Let's get started with some basic terraform commands.

    You can run the following commands in the terminal on the left.

    Check the version of Terraform running on your machine:
    ```
    terraform version
    ```

    You can always get help if you're curious about command syntax:
    ```
    terraform help
    ```
  notes:
  - type: text
    contents: |-
      Terraform open source is a command line application that you can download and run from your laptop or virtual workstation.

      It is written in Go and runs on Mac OSX, Linux or Windows. You can always download the latest version of terraform here:

      https://www.terraform.io/downloads.html
  - type: text
    contents: |-
      Installing Terraform on your laptop or workstation is easy. You simply download the zip file, unpack it, and place it somewhere in your PATH.

      Check out this tutorial for step-by-step instructions:

      https://learn.hashicorp.com/terraform/getting-started/install.html

      We've pre-installed Terraform in your Instruqt lab environment for you.
  tabs:
  - title: Terraform CLI
    type: terminal
    hostname: cloud-client
  difficulty: basic
  timelimit: 300
- slug: tf-init-provider
  id: gvo1lsxgpyjx
  type: challenge
  title: Terraform Init - Install the Azure Provider
  teaser: Terraform needs a provider to talk to cloud APIs. The provider is the bridge
    that connects terraform core to your infrastructure providers.
  assignment: "We have downloaded some terraform code for the HashiCat application.
    We'll be using this source code for the rest of the track. \n\nBefore we can do
    anything with terraform we need to initialize this directory. Run the following
    command in your terminal window:\n\n```\nterraform init\n```\n\nThe *terraform
    init* command scans your terraform code, identifies any providers that are needed,
    and downloads them.\n\nRun the following command to take a peek inside the .terraform
    directory:\n\n```\nls .terraform/plugins/linux_amd64/\n```\n\nThis hidden directory
    is where all modules and plugins are stored."
  notes:
  - type: text
    contents: |-
      The terraform core program isn't very useful by itself. Terraform needs the help of a *provider* to be able to talk to cloud APIs. Terraform has hundreds of different providers. You can browse the provider list here:

      https://www.terraform.io/docs/providers/index.html

      Today we'll be using the *azurerm* provider. AzureRM stands for Azure Resource Manager.
  tabs:
  - title: Terraform CLI
    type: terminal
    hostname: cloud-client
  difficulty: basic
  timelimit: 300
- slug: tf-validate
  id: s35t6v0i2wwk
  type: challenge
  title: Terraform Validate - Test Your Code
  teaser: Terraform has a built in validation tester. This is useful to see whether
    your Terraform code is valid and parses correctly.
  assignment: |-
    Terraform comes with a built-in subcommand called *validate*. This is useful when you want to do a quick syntax check of your code to make sure it parses correctly.

    Edit the main.tf file and remove the curly brace on line 4 of the file. Validate your code:

    ```
    terraform validate
    ```

    Now put the curly brace back onto line 4 and run the validate command again. This time you should pass the validation test.

    **terraform validate** is most often used in automated CI/CD test pipelines. It allows you to quickly catch errors in your code before any other steps are taken.
  notes:
  - type: text
    contents: Terraform has a built-in syntax checker. You can run it with the `terraform
      validate` command.
  tabs:
  - title: Terraform CLI
    type: terminal
    hostname: cloud-client
  - title: main.tf
    type: code
    hostname: cloud-client
    path: /root/hashicat-azure/main.tf
  difficulty: basic
  timelimit: 300
- slug: tf-plan
  id: im52n8wdgt9n
  type: challenge
  title: Terraform Plan - Dry Run Mode
  teaser: Terraform has a dry run mode where you can preview what will be built without
    actually creating any resources. In this challenge we'll run terraform plan and
    view the output.
  assignment: |-
    Run the **terraform plan** command:

    ```
    terraform plan
    ```

    When you run this command terraform will prompt you to enter the `prefix` variable.

    Enter a short string of lower-case letters and/or numbers. You can use your own name here if you wish.

    Keep your prefix string all lower case, and between 5-12 characters long.
  notes:
  - type: text
    contents: |-
      `terraform plan` allows you to preview any changes to your environment in a safe way.

      This can help you identify any unexpected changes before you deploy them, not after they are already built.
  tabs:
  - title: Terraform CLI
    type: terminal
    hostname: cloud-client
  difficulty: basic
  timelimit: 300
- slug: tf-variables
  id: fea5hyeemrxo
  type: challenge
  title: Working with Terraform Variables
  teaser: Terraform variables allow you to customize your infrastructure without editing
    any code. You can use the same terraform code to deploy dev, staging and production
    but with different variables.
  assignment: |-
    We've created a **terraform.tfvars** file for you to edit. This is a special file where you can set any variables you wish to change from their defaults.

    Variables are *defined* in the **variables.tf** file. They are *set* in the **terraform.tfvars** file.

    In terraform all variables must be declared (with or without an optional default value) before you can use them.

    Open the **terraform.tfvars** tab and set your prefix variable there. Save the file with CTRL-S (Windows/Linux) or CMD-S (OSX).

    Now run `terraform plan` in the *Terraform CLI* tab again. This time you won't have to enter your prefix manually.
  notes:
  - type: text
    contents: The **terraform.tfvars** file is a convenient place for users to configure
      their variables.
  tabs:
  - title: Terraform CLI
    type: terminal
    hostname: cloud-client
  - title: terraform.tfvars
    type: code
    hostname: cloud-client
    path: /root/hashicat-azure/terraform.tfvars
  - title: variables.tf
    type: code
    hostname: cloud-client
    path: /root/hashicat-azure/variables.tf
  difficulty: basic
  timelimit: 300
- slug: tf-add-a-variable
  id: nusbmrgoi4cn
  type: challenge
  title: Change Your Location
  teaser: Terraform is flexible enough to deploy infrastructure anywhere in the world.
    You can easily provision your applications in different geographical regions by
    simply changing a single variable.
  assignment: "In one of the previous challenges we set our *prefix* variable.\n\nChoose
    the Azure location nearest to you and set the 'location' variable. You can find
    a list of valid Azure locations here:\n\nhttps://azure.microsoft.com/en-us/global-infrastructure/locations/\n\nExamples:\n\ncentralus
    \ - Iowa  \neastus     - Virginia  \nwestus     - California  \nuksouth    - London
    \ \nsouthindia - Chennai  \neastasia   - Hong Kong  \ncanadacentral - Toronto
    \ \n\nOnce you've set your location variable try running `terraform plan` again.
    What's different this time?\n\nHINT: Remember that you can set any variable you
    wish in the **terraform.tfvars** file."
  notes:
  - type: text
    contents: You can override any variable defined in the *variables.tf* file by
      setting it in your personal *terraform.tfvars* file.
  tabs:
  - title: Terraform CLI
    type: terminal
    hostname: cloud-client
  - title: terraform.tfvars
    type: code
    hostname: cloud-client
    path: /root/hashicat-azure/terraform.tfvars
  - title: variables.tf
    type: code
    hostname: cloud-client
    path: /root/hashicat-azure/variables.tf
  difficulty: basic
  timelimit: 300
- slug: tf-graph
  id: m3at5sjm1vxw
  type: challenge
  title: Terraform Graph - Seeing is Believing
  teaser: Terraform creates a graph of all the infrastructure defined in your code.
    Let's visualize the graph and see what your infrastructure map looks like.
  assignment: |-
    The **terraform graph** command can generate a DOT-formatted graph of your infrastructure. DOT is a graph description language. DOT files can be used with visualization tools like Graphviz.

    Run the terraform graph command now to see the raw output:

    ```
    terraform graph
    ```

    Now let's plot this raw data using the free Blast Radius visualizer. We've pre-installed blast-radius for you. Run the following command then open the **Terraform Graph** tab to see the results:

    ```
    blast-radius --serve .
    ```

    You can use your mouse to click and drag the graph around. Even though we only have one single resource group, all of the variables in our config files are included in the graph. In the next track you'll build more complex infrastructure and watch your graph grow.
  notes:
  - type: text
    contents: Terraform Graph can give you a visual representation of all your infrastructure.
  tabs:
  - title: Terraform CLI
    type: terminal
    hostname: cloud-client
  - title: Terraform Graph
    type: service
    hostname: cloud-client
    port: 5000
  difficulty: basic
  timelimit: 300
checksum: "12520834088485823908"
