# Policy that requires AWS access keys to use PGP keys

##### Imports #####

import "tfplan"
import "strings"

##### Functions #####

# Find all resources of a specific type from all modules using the tfplan import
find_resources_from_plan = func(type) {

  resources = {}

  # Iterate over all modules in the tfplan import
  for tfplan.module_paths as path {
    # Iterate over the named resources of desired type in the module
    for tfplan.module(path).resources[type] else {} as name, instances {
      # Iterate over resource instances
      for instances as index, r {

        # Get the address of the instance
        if length(path) == 0 {
          # root module
          address = type + "." + name + "[" + string(index) + "]"
        } else {
          # non-root module
          address = "module." + strings.join(path, ".module.") + "." +
                    type + "." + name + "[" + string(index) + "]"
        }

        # Add the instance to resources map, setting the key to the address
        resources[address] = r
      }
    }
  }

  return resources
}

# Function to validate that all resources of a specified type
# have a specified attribute
validate_keys = func() {

  validated = true

  # Get all resource instances of the specified type
  resource_instances = find_resources_from_plan("<resource_type>")

  # Loop through the resource instances
  for resource_instances as address, r {
    # Validate that each access key has a PGP key
    if <condition> {
      print("Access key", address, "has a PGP key with value",
            <expression>)
    } else {
      print("Access key", address, "does not have a PGP key set")
      validated = false
    } // end if/else
  } // end for

  return validated

}

##### Rules #####

# Call the validation function
keys_validated = <function>()

# Main rule that evaluates the result of the validation function
main = rule {
  keys_validated
}
